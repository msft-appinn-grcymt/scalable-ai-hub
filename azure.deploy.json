{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "17760584659589470749"
    }
  },
  "definitions": {
    "_1.NamingConfig": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "array"
        },
        "suffix": {
          "type": "array"
        },
        "uniqueLength": {
          "type": "int"
        },
        "uniqueSeed": {
          "type": "string"
        },
        "useDashes": {
          "type": "bool"
        },
        "useLowerCase": {
          "type": "bool"
        },
        "location": {
          "type": "string"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/naming.lib.bicep"
        }
      }
    },
    "_1.NamingOutput": {
      "type": "object",
      "properties": {
        "aiSearch": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "analysisServicesServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "apiManagement": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appConfiguration": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appServiceEnvironment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appServicePlan": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "applicationGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "applicationInsights": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "applicationSecurityGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationCredential": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationRunbook": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationSchedule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationVariable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "availabilitySet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "bastionHost": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchApplication": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchPool": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelDirectline": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelEmail": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelMsTeams": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelSlack": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelsRegistration": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botConnection": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botWebApp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cdnEndpoint": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cdnProfile": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "chaosExperiment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "chaosTarget": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesOpenAi": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesComputerVision": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesContentModerator": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesContentSafety": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesCustomVisionPrediction": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesCustomVisionTraining": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesDocumentIntelligence": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesMultiServiceAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesVideoIndexer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesFaceApi": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesImmersiveReader": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesLanguageService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesSpeechService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveServicesTranslator": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerApps": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerAppsEnvironment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerRegistry": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerRegistryWebhook": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cosmosdbAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "customProvider": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dashboard": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactory": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryDatasetMysql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryDatasetPostgresql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryDatasetSqlServerTable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryIntegrationRuntimeManaged": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceDataLakeStorageGen2": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceKeyVault": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceMysql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServicePostgresql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceSqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryPipeline": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryTriggerSchedule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeAnalyticsAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeAnalyticsFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeStore": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeStoreFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "databaseMigrationProject": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "databaseMigrationService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "databricksWorkspace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "devTestLab": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "devTestLinuxVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "devTestWindowsVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "diskEncryptionSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dnsZone": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridDomain": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridDomainTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridEventSubscription": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubConsumerGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubNamespaceAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubNamespaceDisasterRecoveryConfig": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "expressRouteCircuit": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "expressRouteGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "firewall": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "firewallPolicy": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "frontDoor": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "frontDoorFirewallPolicy": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "functionApp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "grafana": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightHadoopCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightHbaseCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightInteractiveQueryCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightKafkaCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightMlServicesCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightRserverCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightSparkCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightStormCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "image": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotCentralApplication": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHubConsumerGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHubDps": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHubDpsCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVault": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVaultCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVaultKey": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVaultSecret": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kubernetesCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kustoCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kustoDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kustoEventHubDataConnection": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "loadBalancer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "loadBalancerNatRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "loadTesting": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "linuxVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "linuxVirtualMachineScaleSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "localNetworkGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "logicApp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "logAnalyticsWorkspace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "machineLearningWorkspace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "managedDisk": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "managedIdentity": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mapsAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbVirtualNetworkRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mssqlDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mssqlElasticpool": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mssqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlVirtualNetworkRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkInterface": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkSecurityGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkSecurityGroupRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkSecurityRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkWatcher": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "notificationHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "notificationHubAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "notificationHubNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "pointToSiteVpnGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlVirtualNetworkRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "powerbiEmbedded": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "privateDnsZone": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "publicIp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "publicIpPrefix": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "redisCache": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "redisFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "relayHybridConnection": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "relayNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "resourceGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "roleAssignment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "roleDefinition": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "route": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "routeTable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceFabricCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceFabricManagedCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusNamespaceAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusQueue": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusQueueAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusSubscription": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusSubscriptionRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusTopicAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sharedImage": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sharedImageGallery": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "signalrService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "snapshots": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlElasticpool": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlFailoverGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageContainer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageDataLakeGen2Filesystem": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageQueue": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageShare": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageShareDirectory": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageTable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsFunctionJavascriptUdf": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsJob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputEventHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputMssql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputServiceBusQueue": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputServiceBusTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsReferenceInputBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsStreamInputBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsStreamInputEventHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsStreamInputIotHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "subnet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "templateDeployment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "trafficManagerProfile": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualMachineScaleSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualNetwork": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualNetworkGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualNetworkPeering": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualWan": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "windowsVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "windowsVirtualMachineScaleSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/naming.lib.bicep"
        }
      }
    },
    "_1.ServiceNameType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "nameUnique": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/naming.lib.bicep"
        }
      }
    }
  },
  "functions": [
    {
      "namespace": "_1",
      "members": {
        "appService": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "suffix"
            }
          ],
          "output": {
            "type": "string",
            "value": "[_1.name(_1.configWithSuffix(parameters('config'), createArray(parameters('suffix'))), 'app', 60)]"
          },
          "metadata": {
            "description": "Creates the naming convention base on the configuration for Azure resources",
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "configWithIndex": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "int",
              "name": "index"
            }
          ],
          "output": {
            "$ref": "#/definitions/_1.NamingConfig",
            "value": {
              "prefix": "[parameters('config').prefix]",
              "suffix": "[concat(parameters('config').suffix, createArray(padLeft(string(parameters('index')), 3, '0')))]",
              "useDashes": "[parameters('config').useDashes]",
              "useLowerCase": "[parameters('config').useLowerCase]",
              "uniqueLength": "[parameters('config').uniqueLength]",
              "uniqueSeed": "[parameters('config').uniqueSeed]",
              "location": "[parameters('config').location]"
            }
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "configWithSuffix": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "array",
              "name": "additionalSuffix"
            }
          ],
          "output": {
            "$ref": "#/definitions/_1.NamingConfig",
            "value": {
              "prefix": "[parameters('config').prefix]",
              "suffix": "[concat(parameters('config').suffix, parameters('additionalSuffix'))]",
              "useDashes": "[parameters('config').useDashes]",
              "useLowerCase": "[parameters('config').useLowerCase]",
              "uniqueLength": "[parameters('config').uniqueLength]",
              "uniqueSeed": "[parameters('config').uniqueSeed]",
              "location": "[parameters('config').location]"
            }
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "createConfig": {
          "parameters": [
            {
              "type": "array",
              "name": "suffix"
            }
          ],
          "output": {
            "$ref": "#/definitions/_1.NamingConfig",
            "value": {
              "location": "location",
              "prefix": [],
              "suffix": "[parameters('suffix')]",
              "useDashes": true,
              "useLowerCase": true,
              "uniqueLength": 6,
              "uniqueSeed": "[resourceGroup().id]"
            }
          },
          "metadata": {
            "description": "Create a naming config defining only the suffix values array.",
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "createNamingPart": {
          "parameters": [
            {
              "type": "array",
              "name": "prefixOrSuffix"
            },
            {
              "type": "bool",
              "name": "useDashes"
            },
            {
              "type": "bool",
              "name": "useLowerCase"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(empty(parameters('prefixOrSuffix')), '', if(parameters('useLowerCase'), toLower(_1.stringify(parameters('prefixOrSuffix'), _1.delimiter(parameters('useDashes')))), _1.stringify(parameters('prefixOrSuffix'), _1.delimiter(parameters('useDashes')))))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "createResourceNames": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "object",
            "value": {
              "aiSearch": {
                "name": "[_1.name(parameters('config'), 'srch', 60)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'srch', 60)]",
                "slug": "srch"
              },
              "analysisServicesServer": {
                "name": "[_1.nameSafe(parameters('config'), 'as', 63)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'as', 63)]",
                "slug": "as"
              },
              "apiManagement": {
                "name": "[_1.nameSafe(parameters('config'), 'apim', 50)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'apim', 50)]",
                "slug": "apim"
              },
              "appConfiguration": {
                "name": "[_1.name(parameters('config'), 'appcg', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'appcg', 50)]",
                "slug": "appcg"
              },
              "appServiceEnvironment": {
                "name": "[_1.name(parameters('config'), 'ase', 36)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ase', 36)]",
                "slug": "ase"
              },
              "appServicePlan": {
                "name": "[_1.name(parameters('config'), 'plan', 40)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'plan', 40)]",
                "slug": "plan"
              },
              "appService": {
                "name": "[_1.name(parameters('config'), 'app', 60)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'app', 60)]",
                "slug": "app"
              },
              "applicationGateway": {
                "name": "[_1.name(parameters('config'), 'agw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'agw', 80)]",
                "slug": "agw"
              },
              "applicationInsights": {
                "name": "[_1.name(parameters('config'), 'appi', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'appi', 260)]",
                "slug": "appi"
              },
              "applicationSecurityGroup": {
                "name": "[_1.name(parameters('config'), 'asg', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asg', 80)]",
                "slug": "asg"
              },
              "automationAccount": {
                "name": "[_1.name(parameters('config'), 'aa', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aa', 50)]",
                "slug": "aa"
              },
              "automationCertificate": {
                "name": "[_1.name(parameters('config'), 'aacert', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aacert', 128)]",
                "slug": "aacert"
              },
              "automationCredential": {
                "name": "[_1.name(parameters('config'), 'aacred', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aacred', 128)]",
                "slug": "aacred"
              },
              "automationRunbook": {
                "name": "[_1.name(parameters('config'), 'aacred', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aacred', 63)]",
                "slug": "aacred"
              },
              "automationSchedule": {
                "name": "[_1.name(parameters('config'), 'aasched', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aasched', 128)]",
                "slug": "aasched"
              },
              "automationVariable": {
                "name": "[_1.name(parameters('config'), 'aavar', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aavar', 128)]",
                "slug": "aavar"
              },
              "availabilitySet": {
                "name": "[_1.name(parameters('config'), 'avail', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'avail', 80)]",
                "slug": "avail"
              },
              "bastionHost": {
                "name": "[_1.name(parameters('config'), 'bas', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'bas', 80)]",
                "slug": "bas"
              },
              "batchAccount": {
                "name": "[_1.nameSafe(parameters('config'), 'ba', 24)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'ba', 24)]",
                "slug": "ba"
              },
              "batchApplication": {
                "name": "[_1.name(parameters('config'), 'baapp', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'baapp', 64)]",
                "slug": "baapp"
              },
              "batchCertificate": {
                "name": "[_1.name(parameters('config'), 'bacert', 45)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'bacert', 45)]",
                "slug": "bacert"
              },
              "batchPool": {
                "name": "[_1.name(parameters('config'), 'bapool', 24)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'bapool', 24)]",
                "slug": "bapool"
              },
              "botChannelDirectline": {
                "name": "[_1.name(parameters('config'), 'botline', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'botline', 64)]",
                "slug": "botline"
              },
              "botChannelEmail": {
                "name": "[_1.name(parameters('config'), 'botmail', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'botmail', 64)]",
                "slug": "botmail"
              },
              "botChannelMsTeams": {
                "name": "[_1.name(parameters('config'), 'botteams', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'botteams', 64)]",
                "slug": "botteams"
              },
              "botChannelSlack": {
                "name": "[_1.name(parameters('config'), 'botslack', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'botslack', 64)]",
                "slug": "botslack"
              },
              "botChannelsRegistration": {
                "name": "[_1.name(parameters('config'), 'botchan', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'botchan', 64)]",
                "slug": "botchan"
              },
              "botConnection": {
                "name": "[_1.name(parameters('config'), 'botcon', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'botcon', 64)]",
                "slug": "botcon"
              },
              "botWebApp": {
                "name": "[_1.name(parameters('config'), 'bot', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'bot', 64)]",
                "slug": "bot"
              },
              "cdnEndpoint": {
                "name": "[_1.name(parameters('config'), 'cdn', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cdn', 50)]",
                "slug": "cdn"
              },
              "cdnProfile": {
                "name": "[_1.name(parameters('config'), 'cdnprof', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cdnprof', 260)]",
                "slug": "cdnprof"
              },
              "chaosExperiment": {
                "name": "[_1.name(parameters('config'), 'chaosexp', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'chaosexp', 128)]",
                "slug": "chaosexp"
              },
              "chaosTarget": {
                "name": "[_1.name(parameters('config'), 'chaostarget', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'chaostarget', 128)]",
                "slug": "chaostarget"
              },
              "cognitiveAccount": {
                "name": "[_1.name(parameters('config'), 'cog', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cog', 64)]",
                "slug": "cog"
              },
              "cognitiveServicesOpenAi": {
                "name": "[_1.name(parameters('config'), 'oai', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'oai', 64)]",
                "slug": "oai"
              },
              "cognitiveServicesComputerVision": {
                "name": "[_1.name(parameters('config'), 'cv', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cv', 64)]",
                "slug": "cv"
              },
              "cognitiveServicesContentModerator": {
                "name": "[_1.name(parameters('config'), 'cm', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cm', 64)]",
                "slug": "cm"
              },
              "cognitiveServicesContentSafety": {
                "name": "[_1.name(parameters('config'), 'cs', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cs', 64)]",
                "slug": "cs"
              },
              "cognitiveServicesCustomVisionPrediction": {
                "name": "[_1.name(parameters('config'), 'cstv', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cstv', 64)]",
                "slug": "cstv"
              },
              "cognitiveServicesCustomVisionTraining": {
                "name": "[_1.name(parameters('config'), 'cstvt', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cstvt', 64)]",
                "slug": "cstvt"
              },
              "cognitiveServicesDocumentIntelligence": {
                "name": "[_1.name(parameters('config'), 'di', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'di', 64)]",
                "slug": "di"
              },
              "cognitiveServicesMultiServiceAccount": {
                "name": "[_1.name(parameters('config'), 'aisa', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aisa', 64)]",
                "slug": "aisa"
              },
              "cognitiveServicesVideoIndexer": {
                "name": "[_1.name(parameters('config'), 'avi', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'avi', 64)]",
                "slug": "avi"
              },
              "cognitiveServicesFaceApi": {
                "name": "[_1.name(parameters('config'), 'face', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'face', 64)]",
                "slug": "face"
              },
              "cognitiveServicesImmersiveReader": {
                "name": "[_1.name(parameters('config'), 'ir', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ir', 64)]",
                "slug": "ir"
              },
              "cognitiveServicesLanguageService": {
                "name": "[_1.name(parameters('config'), 'lang', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'lang', 64)]",
                "slug": "lang"
              },
              "cognitiveServicesSpeechService": {
                "name": "[_1.name(parameters('config'), 'spch', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'spch', 64)]",
                "slug": "spch"
              },
              "cognitiveServicesTranslator": {
                "name": "[_1.name(parameters('config'), 'trsl', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'trsl', 64)]",
                "slug": "trsl"
              },
              "containerApps": {
                "name": "[_1.name(parameters('config'), 'ca', 32)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ca', 32)]",
                "slug": "ca"
              },
              "containerAppsEnvironment": {
                "name": "[_1.name(parameters('config'), 'cae', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cae', 64)]",
                "slug": "cae"
              },
              "containerGroup": {
                "name": "[_1.name(parameters('config'), 'cg', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cg', 63)]",
                "slug": "cg"
              },
              "containerRegistry": {
                "name": "[_1.nameSafe(parameters('config'), 'acr', 63)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'acr', 63)]",
                "slug": "acr"
              },
              "containerRegistryWebhook": {
                "name": "[_1.nameSafe(parameters('config'), 'crwh', 50)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'crwh', 50)]",
                "slug": "crwh"
              },
              "cosmosdbAccount": {
                "name": "[_1.name(parameters('config'), 'cosmos', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'cosmos', 63)]",
                "slug": "cosmos"
              },
              "customProvider": {
                "name": "[_1.name(parameters('config'), 'prov', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'prov', 64)]",
                "slug": "prov"
              },
              "dashboard": {
                "name": "[_1.name(parameters('config'), 'dsb', 160)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dsb', 160)]",
                "slug": "dsb"
              },
              "dataFactory": {
                "name": "[_1.name(parameters('config'), 'adf', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adf', 63)]",
                "slug": "adf"
              },
              "dataFactoryDatasetMysql": {
                "name": "[_1.name(parameters('config'), 'adfmysql', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfmysql', 260)]",
                "slug": "adfmysql"
              },
              "dataFactoryDatasetPostgresql": {
                "name": "[_1.name(parameters('config'), 'adfpsql', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfpsql', 260)]",
                "slug": "adfpsql"
              },
              "dataFactoryDatasetSqlServerTable": {
                "name": "[_1.name(parameters('config'), 'adfmssql', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfmssql', 260)]",
                "slug": "adfmssql"
              },
              "dataFactoryIntegrationRuntimeManaged": {
                "name": "[_1.name(parameters('config'), 'adfir', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfir', 63)]",
                "slug": "adfir"
              },
              "dataFactoryLinkedServiceDataLakeStorageGen2": {
                "name": "[_1.name(parameters('config'), 'adfsvst', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfsvst', 260)]",
                "slug": "adfsvst"
              },
              "dataFactoryLinkedServiceKeyVault": {
                "name": "[_1.name(parameters('config'), 'adfsvkv', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfsvkv', 260)]",
                "slug": "adfsvkv"
              },
              "dataFactoryLinkedServiceMysql": {
                "name": "[_1.name(parameters('config'), 'adfsvmysql', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfsvmysql', 260)]",
                "slug": "adfsvmysql"
              },
              "dataFactoryLinkedServicePostgresql": {
                "name": "[_1.name(parameters('config'), 'adfsvpsql', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfsvpsql', 260)]",
                "slug": "adfsvpsql"
              },
              "dataFactoryLinkedServiceSqlServer": {
                "name": "[_1.name(parameters('config'), 'adfsvmssql', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfsvmssql', 260)]",
                "slug": "adfsvmssql"
              },
              "dataFactoryPipeline": {
                "name": "[_1.name(parameters('config'), 'adfpl', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adfpl', 260)]",
                "slug": "adfpl"
              },
              "dataFactoryTriggerSchedule": {
                "name": "[_1.name(parameters('config'), 'adftg', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'adftg', 260)]",
                "slug": "adftg"
              },
              "dataLakeAnalyticsAccount": {
                "name": "[_1.nameSafe(parameters('config'), 'dla', 24)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'dla', 24)]",
                "slug": "dla"
              },
              "dataLakeAnalyticsFirewallRule": {
                "name": "[_1.name(parameters('config'), 'dlfw', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dlfw', 50)]",
                "slug": "dlfw"
              },
              "dataLakeStore": {
                "name": "[_1.nameSafe(parameters('config'), 'dls', 24)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'dls', 24)]",
                "slug": "dls"
              },
              "dataLakeStoreFirewallRule": {
                "name": "[_1.name(parameters('config'), 'dlsfw', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dlsfw', 50)]",
                "slug": "dlsfw"
              },
              "databaseMigrationProject": {
                "name": "[_1.name(parameters('config'), 'migr', 57)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'migr', 57)]",
                "slug": "migr"
              },
              "databaseMigrationService": {
                "name": "[_1.name(parameters('config'), 'dms', 62)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dms', 62)]",
                "slug": "dms"
              },
              "databricksWorkspace": {
                "name": "[_1.name(parameters('config'), 'dbw', 30)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dbw', 30)]",
                "slug": "dbw"
              },
              "devTestLab": {
                "name": "[_1.name(parameters('config'), 'lab', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'lab', 50)]",
                "slug": "lab"
              },
              "devTestLinuxVirtualMachine": {
                "name": "[_1.name(parameters('config'), 'labvm', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'labvm', 64)]",
                "slug": "labvm"
              },
              "devTestWindowsVirtualMachine": {
                "name": "[_1.name(parameters('config'), 'labvm', 15)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'labvm', 15)]",
                "slug": "labvm"
              },
              "diskEncryptionSet": {
                "name": "[_1.name(parameters('config'), 'des', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'des', 80)]",
                "slug": "des"
              },
              "dnsZone": {
                "name": "[_1.name(parameters('config'), 'dns', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dns', 63)]",
                "slug": "dns"
              },
              "eventGridDomain": {
                "name": "[_1.name(parameters('config'), 'egd', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'egd', 50)]",
                "slug": "egd"
              },
              "eventGridDomainTopic": {
                "name": "[_1.name(parameters('config'), 'egdt', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'egdt', 50)]",
                "slug": "egdt"
              },
              "eventGridEventSubscription": {
                "name": "[_1.name(parameters('config'), 'egs', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'egs', 64)]",
                "slug": "egs"
              },
              "eventGridTopic": {
                "name": "[_1.name(parameters('config'), 'egt', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'egt', 50)]",
                "slug": "egt"
              },
              "eventHub": {
                "name": "[_1.name(parameters('config'), 'evh', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'evh', 50)]",
                "slug": "evh"
              },
              "eventHubAuthorizationRule": {
                "name": "[_1.name(parameters('config'), 'ehar', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ehar', 50)]",
                "slug": "ehar"
              },
              "eventHubConsumerGroup": {
                "name": "[_1.name(parameters('config'), 'ehcg', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ehcg', 50)]",
                "slug": "ehcg"
              },
              "eventHubNamespace": {
                "name": "[_1.name(parameters('config'), 'ehn', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ehn', 50)]",
                "slug": "ehn"
              },
              "eventHubNamespaceAuthorizationRule": {
                "name": "[_1.name(parameters('config'), 'ehnar', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ehnar', 50)]",
                "slug": "ehnar"
              },
              "eventHubNamespaceDisasterRecoveryConfig": {
                "name": "[_1.name(parameters('config'), 'ehdr', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ehdr', 50)]",
                "slug": "ehdr"
              },
              "expressRouteCircuit": {
                "name": "[_1.name(parameters('config'), 'erc', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'erc', 80)]",
                "slug": "erc"
              },
              "expressRouteGateway": {
                "name": "[_1.name(parameters('config'), 'ergw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ergw', 80)]",
                "slug": "ergw"
              },
              "firewall": {
                "name": "[_1.name(parameters('config'), 'afw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'afw', 80)]",
                "slug": "afw"
              },
              "firewallPolicy": {
                "name": "[_1.name(parameters('config'), 'afwp', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'afwp', 80)]",
                "slug": "afwp"
              },
              "frontDoor": {
                "name": "[_1.name(parameters('config'), 'fd', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'fd', 64)]",
                "slug": "fd"
              },
              "frontDoorFirewallPolicy": {
                "name": "[_1.name(parameters('config'), 'fdfw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'fdfw', 80)]",
                "slug": "fdfw"
              },
              "functionApp": {
                "name": "[_1.name(parameters('config'), 'func', 60)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'func', 60)]",
                "slug": "func"
              },
              "grafana": {
                "name": "[_1.name(parameters('config'), 'grfn', 23)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'grfn', 23)]",
                "slug": "grfn"
              },
              "hdInsightHadoopCluster": {
                "name": "[_1.name(parameters('config'), 'hadoop', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'hadoop', 59)]",
                "slug": "hadoop"
              },
              "hdInsightHbaseCluster": {
                "name": "[_1.name(parameters('config'), 'hbase', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'hbase', 59)]",
                "slug": "hbase"
              },
              "hdInsightInteractiveQueryCluster": {
                "name": "[_1.name(parameters('config'), 'iqr', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'iqr', 59)]",
                "slug": "iqr"
              },
              "hdInsightKafkaCluster": {
                "name": "[_1.name(parameters('config'), 'kafka', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kafka', 59)]",
                "slug": "kafka"
              },
              "hdInsightMlServicesCluster": {
                "name": "[_1.name(parameters('config'), 'mls', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mls', 59)]",
                "slug": "mls"
              },
              "hdInsightRserverCluster": {
                "name": "[_1.name(parameters('config'), 'rsv', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'rsv', 59)]",
                "slug": "rsv"
              },
              "hdInsightSparkCluster": {
                "name": "[_1.name(parameters('config'), 'spark', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'spark', 59)]",
                "slug": "spark"
              },
              "hdInsightStormCluster": {
                "name": "[_1.name(parameters('config'), 'storm', 59)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'storm', 59)]",
                "slug": "storm"
              },
              "image": {
                "name": "[_1.name(parameters('config'), 'img', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'img', 80)]",
                "slug": "img"
              },
              "iotCentralApplication": {
                "name": "[_1.name(parameters('config'), 'iotapp', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'iotapp', 63)]",
                "slug": "iotapp"
              },
              "iotHub": {
                "name": "[_1.name(parameters('config'), 'iot', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'iot', 50)]",
                "slug": "iot"
              },
              "iotHubConsumerGroup": {
                "name": "[_1.name(parameters('config'), 'iotcg', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'iotcg', 50)]",
                "slug": "iotcg"
              },
              "iotHubDps": {
                "name": "[_1.name(parameters('config'), 'dps', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dps', 64)]",
                "slug": "dps"
              },
              "iotHubDpsCertificate": {
                "name": "[_1.name(parameters('config'), 'dpscert', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dpscert', 64)]",
                "slug": "dpscert"
              },
              "keyVault": {
                "name": "[_1.name(parameters('config'), 'kv', 24)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kv', 24)]",
                "slug": "kv"
              },
              "keyVaultCertificate": {
                "name": "[_1.name(parameters('config'), 'kvc', 127)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kvc', 127)]",
                "slug": "kvc"
              },
              "keyVaultKey": {
                "name": "[_1.name(parameters('config'), 'kvk', 127)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kvk', 127)]",
                "slug": "kvk"
              },
              "keyVaultSecret": {
                "name": "[_1.name(parameters('config'), 'kvs', 127)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kvs', 127)]",
                "slug": "kvs"
              },
              "kubernetesCluster": {
                "name": "[_1.name(parameters('config'), 'aks', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'aks', 63)]",
                "slug": "aks"
              },
              "kustoCluster": {
                "name": "[_1.nameSafe(parameters('config'), 'kc', 22)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'kc', 22)]",
                "slug": "kc"
              },
              "kustoDatabase": {
                "name": "[_1.name(parameters('config'), 'kdb', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kdb', 260)]",
                "slug": "kdb"
              },
              "kustoEventHubDataConnection": {
                "name": "[_1.name(parameters('config'), 'kehc', 40)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'kehc', 40)]",
                "slug": "kehc"
              },
              "loadBalancer": {
                "name": "[_1.name(parameters('config'), 'lb', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'lb', 80)]",
                "slug": "lb"
              },
              "loadBalancerNatRule": {
                "name": "[_1.name(parameters('config'), 'lbnatrl', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'lbnatrl', 80)]",
                "slug": "lbnatrl"
              },
              "loadTesting": {
                "name": "[_1.name(parameters('config'), 'lt', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'lt', 64)]",
                "slug": "lt"
              },
              "linuxVirtualMachine": {
                "name": "[_1.name(parameters('config'), 'vm', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vm', 64)]",
                "slug": "vm"
              },
              "linuxVirtualMachineScaleSet": {
                "name": "[_1.name(parameters('config'), 'vmss', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vmss', 64)]",
                "slug": "vmss"
              },
              "localNetworkGateway": {
                "name": "[_1.name(parameters('config'), 'lgw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'lgw', 80)]",
                "slug": "lgw"
              },
              "logicApp": {
                "name": "[_1.name(parameters('config'), 'logic', 43)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'logic', 43)]",
                "slug": "logic"
              },
              "logAnalyticsWorkspace": {
                "name": "[_1.name(parameters('config'), 'log', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'log', 63)]",
                "slug": "log"
              },
              "machineLearningWorkspace": {
                "name": "[_1.name(parameters('config'), 'mlw', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mlw', 260)]",
                "slug": "mlw"
              },
              "managedDisk": {
                "name": "[_1.name(parameters('config'), 'dsk', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dsk', 80)]",
                "slug": "dsk"
              },
              "managedIdentity": {
                "name": "[_1.name(parameters('config'), 'id', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'id', 128)]",
                "slug": "id"
              },
              "mapsAccount": {
                "name": "[_1.name(parameters('config'), 'map', 98)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'map', 98)]",
                "slug": "map"
              },
              "mariadbDatabase": {
                "name": "[_1.name(parameters('config'), 'mariadb', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mariadb', 63)]",
                "slug": "mariadb"
              },
              "mariadbFirewallRule": {
                "name": "[_1.name(parameters('config'), 'mariafw', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mariafw', 128)]",
                "slug": "mariafw"
              },
              "mariadbServer": {
                "name": "[_1.name(parameters('config'), 'maria', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'maria', 63)]",
                "slug": "maria"
              },
              "mariadbVirtualNetworkRule": {
                "name": "[_1.name(parameters('config'), 'mariavn', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mariavn', 128)]",
                "slug": "mariavn"
              },
              "mssqlDatabase": {
                "name": "[_1.name(parameters('config'), 'sqldb', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sqldb', 128)]",
                "slug": "sqldb"
              },
              "mssqlElasticpool": {
                "name": "[_1.name(parameters('config'), 'sqlep', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sqlep', 128)]",
                "slug": "sqlep"
              },
              "mssqlServer": {
                "name": "[_1.name(parameters('config'), 'sql', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sql', 63)]",
                "slug": "sql"
              },
              "mysqlDatabase": {
                "name": "[_1.name(parameters('config'), 'mysqldb', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mysqldb', 63)]",
                "slug": "mysqldb"
              },
              "mysqlFirewallRule": {
                "name": "[_1.name(parameters('config'), 'mysqlfw', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mysqlfw', 128)]",
                "slug": "mysqlfw"
              },
              "mysqlServer": {
                "name": "[_1.name(parameters('config'), 'mysql', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mysql', 63)]",
                "slug": "mysql"
              },
              "mysqlVirtualNetworkRule": {
                "name": "[_1.name(parameters('config'), 'mysqlvn', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'mysqlvn', 128)]",
                "slug": "mysqlvn"
              },
              "networkInterface": {
                "name": "[_1.name(parameters('config'), 'nic', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'nic', 80)]",
                "slug": "nic"
              },
              "networkSecurityGroup": {
                "name": "[_1.name(parameters('config'), 'nsg', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'nsg', 80)]",
                "slug": "nsg"
              },
              "networkSecurityGroupRule": {
                "name": "[_1.name(parameters('config'), 'nsgr', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'nsgr', 80)]",
                "slug": "nsgr"
              },
              "networkSecurityRule": {
                "name": "[_1.name(parameters('config'), 'nsgr', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'nsgr', 80)]",
                "slug": "nsgr"
              },
              "networkWatcher": {
                "name": "[_1.name(parameters('config'), 'nw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'nw', 80)]",
                "slug": "nw"
              },
              "notificationHub": {
                "name": "[_1.name(parameters('config'), 'nh', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'nh', 260)]",
                "slug": "nh"
              },
              "notificationHubAuthorizationRule": {
                "name": "[_1.name(parameters('config'), 'dnsrec', 256)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dnsrec', 256)]",
                "slug": "dnsrec"
              },
              "notificationHubNamespace": {
                "name": "[_1.name(parameters('config'), 'dnsrec', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dnsrec', 50)]",
                "slug": "dnsrec"
              },
              "pointToSiteVpnGateway": {
                "name": "[_1.name(parameters('config'), 'vpngw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vpngw', 80)]",
                "slug": "vpngw"
              },
              "postgresqlDatabase": {
                "name": "[_1.name(parameters('config'), 'psqldb', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'psqldb', 63)]",
                "slug": "psqldb"
              },
              "postgresqlFirewallRule": {
                "name": "[_1.name(parameters('config'), 'psqlfw', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'psqlfw', 128)]",
                "slug": "psqlfw"
              },
              "postgresqlServer": {
                "name": "[_1.name(parameters('config'), 'psql', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'psql', 63)]",
                "slug": "psql"
              },
              "postgresqlVirtualNetworkRule": {
                "name": "[_1.name(parameters('config'), 'psqlvn', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'psqlvn', 128)]",
                "slug": "psqlvn"
              },
              "powerbiEmbedded": {
                "name": "[_1.name(parameters('config'), 'pbi', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'pbi', 63)]",
                "slug": "pbi"
              },
              "privateDnsZone": {
                "name": "[_1.name(parameters('config'), 'pdns', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'pdns', 63)]",
                "slug": "pdns"
              },
              "publicIp": {
                "name": "[_1.name(parameters('config'), 'pip', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'pip', 80)]",
                "slug": "pip"
              },
              "publicIpPrefix": {
                "name": "[_1.name(parameters('config'), 'pippf', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'pippf', 80)]",
                "slug": "pippf"
              },
              "redisCache": {
                "name": "[_1.name(parameters('config'), 'redis', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'redis', 63)]",
                "slug": "redis"
              },
              "redisFirewallRule": {
                "name": "[_1.nameSafe(parameters('config'), 'redisfw', 256)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'redisfw', 256)]",
                "slug": "redisfw"
              },
              "relayHybridConnection": {
                "name": "[_1.name(parameters('config'), 'rlhc', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'rlhc', 260)]",
                "slug": "rlhc"
              },
              "relayNamespace": {
                "name": "[_1.name(parameters('config'), 'rln', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'rln', 50)]",
                "slug": "rln"
              },
              "resourceGroup": {
                "name": "[_1.name(parameters('config'), 'rg', 90)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'rg', 90)]",
                "slug": "rg"
              },
              "roleAssignment": {
                "name": "[_1.name(parameters('config'), 'ra', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'ra', 64)]",
                "slug": "ra"
              },
              "roleDefinition": {
                "name": "[_1.name(parameters('config'), 'rd', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'rd', 64)]",
                "slug": "rd"
              },
              "route": {
                "name": "[_1.name(parameters('config'), 'rt', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'rt', 80)]",
                "slug": "rt"
              },
              "routeTable": {
                "name": "[_1.name(parameters('config'), 'route', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'route', 80)]",
                "slug": "route"
              },
              "serviceFabricCluster": {
                "name": "[_1.name(parameters('config'), 'sf', 23)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sf', 23)]",
                "slug": "sf"
              },
              "serviceFabricManagedCluster": {
                "name": "[_1.name(parameters('config'), 'sfmc', 23)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sfmc', 23)]",
                "slug": "sfmc"
              },
              "serviceBusNamespace": {
                "name": "[_1.name(parameters('config'), 'sb', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sb', 50)]",
                "slug": "sb"
              },
              "serviceBusNamespaceAuthorizationRule": {
                "name": "[_1.name(parameters('config'), 'sbar', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sbar', 50)]",
                "slug": "sbar"
              },
              "serviceBusQueue": {
                "name": "[_1.name(parameters('config'), 'sbq', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sbq', 260)]",
                "slug": "sbq"
              },
              "serviceBusQueueAuthorizationRule": {
                "name": "[_1.name(parameters('config'), 'sbqar', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sbqar', 50)]",
                "slug": "sbqar"
              },
              "serviceBusSubscription": {
                "name": "[_1.name(parameters('config'), 'sbs', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sbs', 50)]",
                "slug": "sbs"
              },
              "serviceBusSubscriptionRule": {
                "name": "[_1.name(parameters('config'), 'sbsr', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sbsr', 50)]",
                "slug": "sbsr"
              },
              "serviceBusTopic": {
                "name": "[_1.name(parameters('config'), 'sbt', 260)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sbt', 260)]",
                "slug": "sbt"
              },
              "serviceBusTopicAuthorizationRule": {
                "name": "[_1.name(parameters('config'), 'dnsrec', 50)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'dnsrec', 50)]",
                "slug": "dnsrec"
              },
              "sharedImage": {
                "name": "[_1.name(parameters('config'), 'si', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'si', 80)]",
                "slug": "si"
              },
              "sharedImageGallery": {
                "name": "[_1.nameSafe(parameters('config'), 'sig', 80)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'sig', 80)]",
                "slug": "sig"
              },
              "signalrService": {
                "name": "[_1.name(parameters('config'), 'sgnlr', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sgnlr', 63)]",
                "slug": "sgnlr"
              },
              "snapshots": {
                "name": "[_1.name(parameters('config'), 'snap', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'snap', 80)]",
                "slug": "snap"
              },
              "sqlElasticpool": {
                "name": "[_1.name(parameters('config'), 'sqlep', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sqlep', 128)]",
                "slug": "sqlep"
              },
              "sqlFailoverGroup": {
                "name": "[_1.name(parameters('config'), 'sqlfg', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sqlfg', 63)]",
                "slug": "sqlfg"
              },
              "sqlFirewallRule": {
                "name": "[_1.name(parameters('config'), 'sqlfw', 128)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sqlfw', 128)]",
                "slug": "sqlfw"
              },
              "sqlServer": {
                "name": "[_1.name(parameters('config'), 'sql', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sql', 63)]",
                "slug": "sql"
              },
              "storageAccount": {
                "name": "[_1.nameSafe(parameters('config'), 'st', 24)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'st', 24)]",
                "slug": "st"
              },
              "storageBlob": {
                "name": "[_1.name(parameters('config'), 'blob', 1024)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'blob', 1024)]",
                "slug": "blob"
              },
              "storageContainer": {
                "name": "[_1.name(parameters('config'), 'stct', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'stct', 63)]",
                "slug": "stct"
              },
              "storageDataLakeGen2Filesystem": {
                "name": "[_1.name(parameters('config'), 'stdl', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'stdl', 63)]",
                "slug": "stdl"
              },
              "storageQueue": {
                "name": "[_1.name(parameters('config'), 'stq', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'stq', 63)]",
                "slug": "stq"
              },
              "storageShare": {
                "name": "[_1.name(parameters('config'), 'sts', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sts', 63)]",
                "slug": "sts"
              },
              "storageShareDirectory": {
                "name": "[_1.name(parameters('config'), 'sts', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'sts', 63)]",
                "slug": "sts"
              },
              "storageTable": {
                "name": "[_1.nameSafe(parameters('config'), 'stt', 63)]",
                "nameUnique": "[_1.nameSafeUnique(parameters('config'), 'stt', 63)]",
                "slug": "stt"
              },
              "streamAnalyticsFunctionJavascriptUdf": {
                "name": "[_1.name(parameters('config'), 'asafunc', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asafunc', 63)]",
                "slug": "asafunc"
              },
              "streamAnalyticsJob": {
                "name": "[_1.name(parameters('config'), 'asa', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asa', 63)]",
                "slug": "asa"
              },
              "streamAnalyticsOutputBlob": {
                "name": "[_1.name(parameters('config'), 'asaoblob', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaoblob', 63)]",
                "slug": "asaoblob"
              },
              "streamAnalyticsOutputEventHub": {
                "name": "[_1.name(parameters('config'), 'asaoeh', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaoeh', 63)]",
                "slug": "asaoeh"
              },
              "streamAnalyticsOutputMssql": {
                "name": "[_1.name(parameters('config'), 'asaomssql', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaomssql', 63)]",
                "slug": "asaomssql"
              },
              "streamAnalyticsOutputServiceBusQueue": {
                "name": "[_1.name(parameters('config'), 'asaosbq', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaosbq', 63)]",
                "slug": "asaosbq"
              },
              "streamAnalyticsOutputServiceBusTopic": {
                "name": "[_1.name(parameters('config'), 'asaosbt', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaosbt', 63)]",
                "slug": "asaosbt"
              },
              "streamAnalyticsReferenceInputBlob": {
                "name": "[_1.name(parameters('config'), 'asarblob', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asarblob', 63)]",
                "slug": "asarblob"
              },
              "streamAnalyticsStreamInputBlob": {
                "name": "[_1.name(parameters('config'), 'asaiblob', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaiblob', 63)]",
                "slug": "asaiblob"
              },
              "streamAnalyticsStreamInputEventHub": {
                "name": "[_1.name(parameters('config'), 'asaieh', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaieh', 63)]",
                "slug": "asaieh"
              },
              "streamAnalyticsStreamInputIotHub": {
                "name": "[_1.name(parameters('config'), 'asaiiot', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'asaiiot', 63)]",
                "slug": "asaiiot"
              },
              "subnet": {
                "name": "[_1.name(parameters('config'), 'snet', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'snet', 80)]",
                "slug": "snet"
              },
              "templateDeployment": {
                "name": "[_1.name(parameters('config'), 'deploy', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'deploy', 64)]",
                "slug": "deploy"
              },
              "trafficManagerProfile": {
                "name": "[_1.name(parameters('config'), 'traf', 63)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'traf', 63)]",
                "slug": "traf"
              },
              "virtualMachine": {
                "name": "[_1.name(parameters('config'), 'vm', 15)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vm', 15)]",
                "slug": "vm"
              },
              "virtualMachineScaleSet": {
                "name": "[_1.name(parameters('config'), 'vmss', 15)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vmss', 15)]",
                "slug": "vmss"
              },
              "virtualNetwork": {
                "name": "[_1.name(parameters('config'), 'vnet', 64)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vnet', 64)]",
                "slug": "vnet"
              },
              "virtualNetworkGateway": {
                "name": "[_1.name(parameters('config'), 'vgw', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vgw', 80)]",
                "slug": "vgw"
              },
              "virtualNetworkPeering": {
                "name": "[_1.name(parameters('config'), 'vpeer', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vpeer', 80)]",
                "slug": "vpeer"
              },
              "virtualWan": {
                "name": "[_1.name(parameters('config'), 'vwan', 80)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vwan', 80)]",
                "slug": "vwan"
              },
              "windowsVirtualMachine": {
                "name": "[_1.name(parameters('config'), 'vm', 15)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vm', 15)]",
                "slug": "vm"
              },
              "windowsVirtualMachineScaleSet": {
                "name": "[_1.name(parameters('config'), 'vmss', 15)]",
                "nameUnique": "[_1.nameUnique(parameters('config'), 'vmss', 15)]",
                "slug": "vmss"
              }
            }
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "createResourceNamesWithSuffix": {
          "parameters": [
            {
              "type": "array",
              "name": "suffix"
            }
          ],
          "output": {
            "$ref": "#/definitions/_1.NamingOutput",
            "value": "[_1.createResourceNames(_1.createConfig(parameters('suffix')))]"
          },
          "metadata": {
            "description": "Create resource names defining only the suffix values array.",
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "delimiter": {
          "parameters": [
            {
              "type": "bool",
              "name": "useDashes"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(parameters('useDashes'), '-', '')]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "locationPlaceholder": {
          "parameters": [],
          "output": {
            "type": "string",
            "value": "**location**"
          },
          "metadata": {
            "description": "Returns a placeholder string for location",
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "name": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "slug"
            },
            {
              "type": "int",
              "name": "maxLength"
            }
          ],
          "output": {
            "type": "string",
            "value": "[_1.nameInner(_1.nameTemplate(parameters('config')), parameters('slug'), parameters('maxLength'), _1.delimiter(parameters('config').useDashes))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameInner": {
          "parameters": [
            {
              "type": "string",
              "name": "templatedName"
            },
            {
              "type": "string",
              "name": "slug"
            },
            {
              "type": "int",
              "name": "maxLength"
            },
            {
              "type": "string",
              "name": "delimiterChar"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(endsWith(take(replace(parameters('templatedName'), _1.placeholder(), parameters('slug')), parameters('maxLength')), parameters('delimiterChar')), take(replace(parameters('templatedName'), _1.placeholder(), parameters('slug')), sub(parameters('maxLength'), 1)), take(replace(parameters('templatedName'), _1.placeholder(), parameters('slug')), parameters('maxLength')))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameSafe": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "slug"
            },
            {
              "type": "int",
              "name": "maxLength"
            }
          ],
          "output": {
            "type": "string",
            "value": "[_1.nameInner(_1.nameSafeTemplate(parameters('config')), parameters('slug'), parameters('maxLength'), _1.delimiter(parameters('config').useDashes))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameSafeTemplate": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[toLower(replace(_1.nameTemplate(parameters('config')), _1.delimiter(parameters('config').useDashes), ''))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameSafeUnique": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "slug"
            },
            {
              "type": "int",
              "name": "maxLength"
            }
          ],
          "output": {
            "type": "string",
            "value": "[_1.nameInner(_1.nameUniqueSafeTemplate(parameters('config')), parameters('slug'), parameters('maxLength'), _1.delimiter(parameters('config').useDashes))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameTemplate": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[join(filter(createArray(_1.prefix(parameters('config')), _1.placeholder(), _1.suffix(parameters('config'))), lambda('s', not(empty(lambdaVariables('s'))))), _1.delimiter(parameters('config').useDashes))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameUnique": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "slug"
            },
            {
              "type": "int",
              "name": "maxLength"
            }
          ],
          "output": {
            "type": "string",
            "value": "[_1.nameInner(_1.nameUniqueTemplate(parameters('config')), parameters('slug'), parameters('maxLength'), _1.delimiter(parameters('config').useDashes))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameUniqueSafeTemplate": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[toLower(replace(_1.nameUniqueTemplate(parameters('config')), _1.delimiter(parameters('config').useDashes), ''))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "nameUniqueTemplate": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[join(filter(createArray(_1.prefix(parameters('config')), _1.placeholder(), _1.suffix(parameters('config')), _1.uniquePart(parameters('config'))), lambda('s', not(empty(lambdaVariables('s'))))), _1.delimiter(parameters('config').useDashes))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "placeholder": {
          "parameters": [],
          "output": {
            "type": "string",
            "value": "[[****]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "prefix": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[replace(_1.createNamingPart(parameters('config').prefix, parameters('config').useDashes, parameters('config').useLowerCase), _1.locationPlaceholder(), _1.regionAbbreviations()[parameters('config').location])]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "regionAbbreviations": {
          "parameters": [],
          "output": {
            "type": "object",
            "value": {
              "australiacentral": "auc",
              "australiacentral2": "auc2",
              "australiaeast": "aue",
              "australiasoutheast": "ause",
              "brazilsouth": "brs",
              "brazilsoutheast": "brse",
              "brazilus": "brus",
              "canadacentral": "canc",
              "canadaeast": "cane",
              "centralindia": "cin",
              "centralus": "cus",
              "centraluseuap": "cuseuap",
              "eastasia": "ea",
              "eastus": "eus",
              "eastus2": "eus2",
              "eastus2euap": "eus2euap",
              "eastusstg": "eusstg",
              "francecentral": "frc",
              "francesouth": "frs",
              "germanynorth": "gern",
              "germanywestcentral": "gerwc",
              "israelcentral": "isc",
              "italynorth": "itn",
              "japaneast": "jae",
              "japanwest": "jaw",
              "jioindiacentral": "jioinc",
              "jioindiawest": "jioinw",
              "koreacentral": "koc",
              "koreasouth": "kors",
              "mexicocentral": "mxc",
              "northcentralus": "ncus",
              "northeurope": "neu",
              "norwayeast": "nore",
              "norwaywest": "norw",
              "polandcentral": "polc",
              "qatarcentral": "qatc",
              "southafricanorth": "san",
              "southafricawest": "saw",
              "southcentralus": "scus",
              "southeastasia": "sea",
              "southindia": "sin",
              "swedencentral": "swc",
              "switzerlandnorth": "swn",
              "switzerlandwest": "sww",
              "uaecentral": "uaec",
              "uaenorth": "uaen",
              "uksouth": "uks",
              "ukwest": "ukw",
              "westcentralus": "wcus",
              "westeurope": "weu",
              "westindia": "win",
              "westus": "wus",
              "westus2": "wus2",
              "westus3": "wus3"
            }
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "stringify": {
          "parameters": [
            {
              "type": "array",
              "name": "array"
            },
            {
              "type": "string",
              "name": "delimit"
            }
          ],
          "output": {
            "type": "string",
            "value": "[format('{0}', replace(replace(replace(string(parameters('array')), '[\"', ''), '\"]', ''), '\",\"', parameters('delimit')))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "subnet": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            },
            {
              "type": "int",
              "name": "index"
            }
          ],
          "output": {
            "type": "string",
            "value": "[_1.name(_1.configWithIndex(parameters('config'), parameters('index')), 'subnet', 80)]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "suffix": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[replace(_1.createNamingPart(parameters('config').suffix, parameters('config').useDashes, parameters('config').useLowerCase), _1.locationPlaceholder(), _1.regionAbbreviations()[parameters('config').location])]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        },
        "uniquePart": {
          "parameters": [
            {
              "$ref": "#/definitions/_1.NamingConfig",
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(greater(parameters('config').uniqueLength, 0), toLower(take(uniqueString(parameters('config').uniqueSeed), parameters('config').uniqueLength)), '')]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "modules/naming.lib.bicep"
            }
          }
        }
      }
    }
  ],
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location to deploy the resources to"
      }
    },
    "applicationName": {
      "type": "string",
      "metadata": {
        "description": "The name of the application"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "The environment to deploy the resources to"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The tags to apply to the resources"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The CIDR block to use for the virtual network"
      }
    },
    "apimAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The CIDR for API Management subnet"
      }
    },
    "appGatewayAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The CIDR for App Gateway subnet"
      }
    },
    "privateLinkAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The CIDR for Private Link subnet"
      }
    },
    "privateEndpointsAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The CIDR for Private Endpoints subnet"
      }
    },
    "languageServiceSku": {
      "type": "string",
      "defaultValue": "S"
    },
    "openAIDeployments": {
      "type": "array"
    },
    "openAILocation": {
      "type": "string",
      "metadata": {
        "description": "Location of the OpenAI service"
      }
    },
    "apimSKU": {
      "type": "string",
      "defaultValue": "Developer",
      "metadata": {
        "description": "APIM SKU"
      }
    },
    "aiProducts": {
      "type": "array",
      "defaultValue": [
        {
          "name": "Small",
          "TPMThreshold": "20000"
        },
        {
          "name": "Medium",
          "TPMThreshold": "50000"
        },
        {
          "name": "Large",
          "TPMThreshold": "100000"
        },
        {
          "name": "Extra Large",
          "TPMThreshold": "200000"
        }
      ],
      "metadata": {
        "description": "Array with the OpenAI products and the respective token per limit groupings/t-shirt sizing to be applied"
      }
    },
    "VmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "VM Admin username"
      }
    },
    "VmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "VM Admin Password"
      }
    },
    "hubDnsName": {
      "type": "string",
      "metadata": {
        "description": "The (internal) hostname to be used by the AI hub - to be used by the follow up on boarding script"
      }
    },
    "namingConfig": {
      "$ref": "#/definitions/_1.NamingConfig",
      "defaultValue": "[_1.createConfig(createArray(parameters('location'), parameters('applicationName'), parameters('environment'), _1.locationPlaceholder()))]"
    }
  },
  "variables": {
    "defaultTags": "[union(createObject('applicationName', parameters('applicationName'), 'environment', parameters('environment')), parameters('tags'))]",
    "names": "[_1.createResourceNames(parameters('namingConfig'))]"
  },
  "resources": {
    "rg": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('names').resourceGroup.name]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]"
    },
    "main": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "AIHub-MainDeployment",
      "resourceGroup": "[variables('names').resourceGroup.name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "naming": {
            "value": "[variables('names')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('defaultTags')]"
          },
          "applicationName": {
            "value": "[parameters('applicationName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "apimAddressPrefix": {
            "value": "[parameters('apimAddressPrefix')]"
          },
          "aiProducts": {
            "value": "[parameters('aiProducts')]"
          },
          "appGatewayAddressPrefix": {
            "value": "[parameters('appGatewayAddressPrefix')]"
          },
          "privateEndpointsAddressPrefix": {
            "value": "[parameters('privateEndpointsAddressPrefix')]"
          },
          "privateLinkAddressPrefix": {
            "value": "[parameters('privateLinkAddressPrefix')]"
          },
          "languageServiceSku": {
            "value": "[parameters('languageServiceSku')]"
          },
          "openAIDeployments": {
            "value": "[parameters('openAIDeployments')]"
          },
          "openAILocation": {
            "value": "[parameters('openAILocation')]"
          },
          "apimSKU": {
            "value": "[parameters('apimSKU')]"
          },
          "VmAdminUsername": {
            "value": "[parameters('VmAdminUsername')]"
          },
          "VmAdminPassword": {
            "value": "[parameters('VmAdminPassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "14410787488287423484"
            }
          },
          "parameters": {
            "naming": {
              "type": "object",
              "metadata": {
                "description": "The naming object generated from the azure.deploy.bicep file. It contains the standardized name for each Azure resource"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location to deploy the resources to"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to the resources"
              }
            },
            "applicationName": {
              "type": "string",
              "metadata": {
                "description": "The name of the application"
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR block to use for the virtual network"
              }
            },
            "apimAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR for API Management subnet"
              }
            },
            "appGatewayAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR for App Gateway subnet"
              }
            },
            "privateLinkAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR for Private Link subnet"
              }
            },
            "privateEndpointsAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The CIDR for Private Endpoints subnet"
              }
            },
            "languageServiceSku": {
              "type": "string",
              "defaultValue": "S",
              "metadata": {
                "description": "SKU for the Language AI Service"
              }
            },
            "openAIDeployments": {
              "type": "array",
              "metadata": {
                "description": "Array containing all the OpenAI deployments along with their configurations and model deployment if needed"
              }
            },
            "openAILocation": {
              "type": "string",
              "metadata": {
                "description": "Location of the OpenAI service"
              }
            },
            "apimSKU": {
              "type": "string",
              "defaultValue": "Developer",
              "metadata": {
                "description": "APIM SKU"
              }
            },
            "aiProducts": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "Small",
                  "TPMThreshold": "20000"
                },
                {
                  "name": "Medium",
                  "TPMThreshold": "50000"
                },
                {
                  "name": "Large",
                  "TPMThreshold": "100000"
                },
                {
                  "name": "Extra Large",
                  "TPMThreshold": "200000"
                }
              ],
              "metadata": {
                "description": "Array with the OpenAI products and the respective token per limit groupings/t-shirt sizing to be applied"
              }
            },
            "VmAdminUsername": {
              "type": "string",
              "metadata": {
                "description": "VM Admin username"
              }
            },
            "VmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "VM Admin Password"
              }
            },
            "keyVaultSku": {
              "type": "string",
              "defaultValue": "standard",
              "metadata": {
                "description": "SKU for the Key Vault"
              }
            }
          },
          "variables": {
            "resourceNames": {
              "vnet": "[parameters('naming').virtualNetwork.name]",
              "applicationInsights": "[parameters('naming').applicationInsights.name]",
              "keyVault": "[parameters('naming').keyVault.name]",
              "jumpboxVM": "[take(format('jb-{0}', parameters('naming').virtualMachine.name), 15)]",
              "languageService": "[format('lng-{0}', parameters('naming').cognitiveAccount.name)]",
              "openAI": "[format('oai-{0}', parameters('naming').cognitiveAccount.name)]",
              "apim": "[format('{0}2', parameters('naming').apiManagement.name)]",
              "userAssignedIdentityApim": "[format('uai-{0}', parameters('naming').apiManagement.name)]",
              "apimNSG": "[format('{0}-apim', parameters('naming').networkSecurityGroup.name)]",
              "applicationGateway": "[parameters('naming').applicationGateway.name]"
            },
            "privateDnsZonesToCreate": [
              {
                "name": "dns-apim",
                "dnsName": "azure-api.net"
              },
              {
                "name": "dns-ai",
                "dnsName": "privatelink.cognitiveservices.azure.com"
              },
              {
                "name": "dns-openai",
                "dnsName": "privatelink.openai.azure.com"
              },
              {
                "name": "dns-keyvault",
                "dnsName": "privatelink.vaultcore.azure.net"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('NSG-{0}-Deployment', variables('resourceNames').apimNSG)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').apimNSG]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "apim": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "4247425159483060980"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "allowHttpInbound": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "allowHttpsInbound": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "allowHttpsOutbound": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "allowSsh": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "azureLoadTesting": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "applicationGateway": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "apim": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "variables": {
                    "httpSecurityRule": "[if(parameters('allowHttpInbound'), createArray(createObject('name', 'AllowHTTPInbound', 'properties', createObject('description', 'Allow inbound http traffic from everywhere', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '80', 'sourceAddressPrefix', 'Internet', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 1000, 'direction', 'Inbound'))), createArray())]",
                    "httpsSecurityRule": "[if(parameters('allowHttpsInbound'), createArray(createObject('name', 'AllowHTTPSInbound', 'properties', createObject('description', 'Allow inbound HTTPS traffic from everywhere', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', 'Internet', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound'))), createArray())]",
                    "sshSecurityRule": "[if(parameters('allowSsh'), createArray(createObject('name', 'AllowSSHInbound', 'properties', createObject('description', 'Allow inbound ssh from everywhere', 'protocol', 'TCP', 'sourcePortRange', '*', 'destinationPortRange', '22', 'sourceAddressPrefix', '*', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 200, 'direction', 'Inbound'))), createArray())]",
                    "httpsOutboundSecurityRule": "[if(parameters('allowHttpsOutbound'), createArray(createObject('name', 'AllowHTTPSInbound', 'properties', createObject('description', 'Allow outbound traffic for https ssh from everywhere', 'protocol', 'TCP', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', '*', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 500, 'direction', 'Outbound'))), createArray())]",
                    "applicationGatewayRules": "[if(parameters('applicationGateway'), createArray(createObject('name', 'HealthProbes', 'properties', createObject('protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '65200-65535', 'sourceAddressPrefix', 'GatewayManager', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')), createObject('name', 'Allow_TLS', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', '*', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 110, 'direction', 'Inbound')), createObject('name', 'Allow_HTTP', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '80', 'sourceAddressPrefix', '*', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 111, 'direction', 'Inbound')), createObject('name', 'Allow_AzureLoadBalancer', 'properties', createObject('protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '*', 'sourceAddressPrefix', 'AzureLoadBalancer', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 120, 'direction', 'Inbound'))), createArray())]",
                    "loadTestingSecurityRules": "[if(parameters('azureLoadTesting'), createArray(createObject('name', 'batch-node-management-inbound', 'properties', createObject('description', 'Create, update, and delete of Azure Load Testing compute instances.', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '29876-29877', 'sourceAddressPrefix', 'BatchNodeManagement', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')), createObject('name', 'azure-load-testing-inbound', 'properties', createObject('description', 'Create, update, and delete of Azure Load Testing compute instances.', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '8080', 'sourceAddressPrefix', 'AzureLoadTestingInstanceManagement', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 110, 'direction', 'Inbound')), createObject('name', 'azure-load-testing-outbound', 'properties', createObject('description', 'Used for various operations involved in orchestrating a load tests.', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '*', 'sourceAddressPrefix', '*', 'destinationAddressPrefix', '*', 'access', 'Allow', 'priority', 120, 'direction', 'Outbound'))), createArray())]",
                    "apimRules": "[if(parameters('apim'), createArray(createObject('name', 'Client_communication_to_API_Management', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRanges', createArray('80', '443'), 'sourceAddressPrefix', 'Internet', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')), createObject('name', 'Management_endpoint_for_Azure_portal_and_Powershell', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '3443', 'sourceAddressPrefix', 'ApiManagement', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 110, 'direction', 'Inbound')), createObject('name', 'Dependency_on_Azure_Storage', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'Storage', 'access', 'Allow', 'priority', 120, 'direction', 'Outbound')), createObject('name', 'Azure_Active_Directory_and_Azure_Key_Vault_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'AzureActiveDirectory', 'access', 'Allow', 'priority', 130, 'direction', 'Outbound')), createObject('name', 'Authorizations_dependency_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'AzureConnectors', 'access', 'Allow', 'priority', 140, 'direction', 'Outbound')), createObject('name', 'Access_to_Azure_SQL_Endpoints', 'properties', createObject('protocol', 'TCP', 'sourcePortRange', '*', 'destinationPortRange', '1433', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'Sql', 'access', 'Allow', 'priority', 150, 'direction', 'Outbound')), createObject('name', 'Access_To_Azure_Key_Vault', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '443', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'AzureKeyVault', 'access', 'Allow', 'priority', 160, 'direction', 'Outbound')), createObject('name', 'Dependency_For_Log_To_Azure_EventHubs_Policy_And_Azure_Monitor_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRanges', createArray('5671', '5672', '444'), 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'EventHub', 'access', 'Allow', 'priority', 170, 'direction', 'Outbound')), createObject('name', 'Dependency_on_Azure_File_Share_for_GIT_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '445', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'Storage', 'access', 'Allow', 'priority', 180, 'direction', 'Outbound')), createObject('name', 'Publish_Diagnostic_Logs_And_Metrics_And_Application_Insights_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRanges', createArray('1886', '443'), 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'AzureMonitor', 'access', 'Allow', 'priority', 190, 'direction', 'Outbound')), createObject('name', 'Access_External_Azure_Redis_Cache_Outbound_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 200, 'direction', 'Outbound', 'destinationPortRange', '6380')), createObject('name', 'Access_External_Azure_Redis_Cache_Inbound_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 200, 'direction', 'Inbound', 'destinationPortRange', '6380')), createObject('name', 'Access_Internal_Azure_Redis_Cache_Outbound_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 210, 'direction', 'Outbound', 'destinationPortRange', '6381-6383')), createObject('name', 'Access_Internal_Azure_Redis_Cache_Inbound_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 210, 'direction', 'Inbound', 'destinationPortRange', '6381-6383')), createObject('name', 'Sync_Counters_For_Rate_Limit_Policies_Outbound_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 220, 'direction', 'Outbound', 'destinationPortRange', '4290')), createObject('name', 'Sync_Counters_For_Rate_Limit_Policies_Inbound_Optional', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 220, 'direction', 'Inbound', 'destinationPortRange', '4290')), createObject('name', 'Azure_Infrastructure_Load_Balancer', 'properties', createObject('protocol', 'Tcp', 'sourcePortRange', '*', 'sourceAddressPrefix', 'AzureLoadBalancer', 'destinationAddressPrefix', 'VirtualNetwork', 'access', 'Allow', 'priority', 230, 'direction', 'Inbound', 'destinationPortRange', '6390')), createObject('name', 'Deny_All_Internet_Outbound', 'properties', createObject('protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '*', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'Internet', 'access', 'Deny', 'priority', 999, 'direction', 'Outbound'))), createArray())]",
                    "securityRules": "[concat(variables('httpSecurityRule'), variables('httpsSecurityRule'), variables('httpsOutboundSecurityRule'), variables('sshSecurityRule'), variables('applicationGatewayRules'), variables('loadTestingSecurityRules'), variables('apimRules'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "securityRules": "[variables('securityRules')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Vnet-{0}-Deployment', parameters('applicationName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "addressPrefix": {
                    "value": "[parameters('vnetAddressPrefix')]"
                  },
                  "subnets": {
                    "value": [
                      {
                        "name": "privateendpoints-snet",
                        "properties": {
                          "addressPrefix": "[parameters('privateEndpointsAddressPrefix')]",
                          "privateEndpointNetworkPolicies": "Disabled"
                        }
                      },
                      {
                        "name": "apim-snet",
                        "properties": {
                          "addressPrefix": "[parameters('apimAddressPrefix')]",
                          "networkSecurityGroup": {
                            "id": "[reference(resourceId('Microsoft.Resources/deployments', format('NSG-{0}-Deployment', variables('resourceNames').apimNSG)), '2022-09-01').outputs.nsgId.value]"
                          }
                        }
                      },
                      {
                        "name": "applicationgateway-snet",
                        "properties": {
                          "addressPrefix": "[parameters('appGatewayAddressPrefix')]"
                        }
                      },
                      {
                        "name": "privatelink-snet",
                        "properties": {
                          "addressPrefix": "[parameters('privateLinkAddressPrefix')]",
                          "privateEndpointNetworkPolicies": "Disabled",
                          "privateLinkServiceNetworkPolicies": "Disabled"
                        }
                      }
                    ]
                  },
                  "name": {
                    "value": "[variables('resourceNames').vnet]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "13631697448108180900"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "addressPrefix": {
                      "type": "string"
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('addressPrefix')]"
                          ]
                        },
                        "subnets": "[parameters('subnets')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                    },
                    "subnets": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2023-05-01').subnets]"
                    },
                    "appGWprivateIp": {
                      "type": "string",
                      "value": "[parseCidr(reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2023-05-01').subnets[2].properties.addressPrefix).lastUsable]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('NSG-{0}-Deployment', variables('resourceNames').apimNSG))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "privateDnsZones-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsZones": {
                    "value": "[variables('privateDnsZonesToCreate')]"
                  },
                  "vnetIds": {
                    "value": [
                      "[reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.vnetId.value]"
                    ]
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17781966726604490158"
                    }
                  },
                  "parameters": {
                    "dnsZones": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "vnetIds": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZone",
                        "count": "[length(parameters('dnsZones'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('dnsZones')[copyIndex()].dnsName]",
                      "location": "Global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLinks",
                        "count": "[length(parameters('dnsZones'))]"
                      },
                      "condition": "[not(empty(parameters('vnetIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('PrvDnsZoneLinks-Deployment-{0}', parameters('dnsZones')[copyIndex()].name), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('dnsZones')[copyIndex()].dnsName]"
                          },
                          "vnetIds": {
                            "value": "[parameters('vnetIds')]"
                          },
                          "registrationEnabled": {
                            "value": "[parameters('registrationEnabled')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "14341899036475739084"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "registrationEnabled": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetIds": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateDnsZoneLinks",
                                "count": "[length(parameters('vnetIds'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), copyIndex())]",
                              "location": "Global",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "registrationEnabled": "[parameters('registrationEnabled')]",
                                "virtualNetwork": {
                                  "id": "[parameters('vnetIds')[copyIndex()]]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "ids": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('vnetIds'))))]",
                                "input": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[0], split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[1])]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZones')[copyIndex()].dnsName)]"
                      ]
                    }
                  ],
                  "outputs": {
                    "zones": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('dnsZones'))]",
                        "input": {
                          "id": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZones')[copyIndex()].dnsName)]",
                          "deploymentName": "[parameters('dnsZones')[copyIndex()].name]",
                          "dnsName": "[parameters('dnsZones')[copyIndex()].dnsName]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AppInsights-{0}-Deployment', variables('resourceNames').applicationInsights)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('resourceNames').applicationInsights]"
                  },
                  "projectName": {
                    "value": "[parameters('applicationName')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment'), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15672847844393795999"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "projectName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "keyVaultName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "deployWorkspace": "[empty(parameters('logAnalyticsWorkspaceId'))]",
                    "workspaceName": "[format('log-{0}', parameters('name'))]"
                  },
                  "resources": [
                    {
                      "condition": "[variables('deployWorkspace')]",
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[variables('workspaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), createObject('displayName', variables('workspaceName'), 'projectName', parameters('projectName')))]",
                      "properties": {
                        "retentionInDays": 30,
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "web",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[if(variables('deployWorkspace'), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), parameters('logAnalyticsWorkspaceId'))]",
                        "CustomMetricsOptedInType": "WithDimensions"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-ConnectionString', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-ConnectionString', parameters('name'))]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "value": {
                            "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "2810329607244796464"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The KeyVault's name"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret in KeyVault."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret in the KeyVault."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2023-02-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "properties": {
                                "value": "[parameters('value')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "type": {
                              "type": "string",
                              "value": "Microsoft.KeyVault/vaults/secrets"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2023-02-01').secretUri]"
                            },
                            "uriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2023-02-01').secretUriWithVersion]"
                            },
                            "reference": {
                              "type": "string",
                              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "instrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "value": "[if(variables('deployWorkspace'), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), parameters('logAnalyticsWorkspaceId'))]"
                    },
                    "keyReferenceUriWithVersion": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-ConnectionString', parameters('name'))), '2022-09-01').outputs.uriWithVersion.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Deployment', variables('resourceNames').languageService)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').languageService]"
                  },
                  "kind": {
                    "value": "TextAnalytics"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "[parameters('languageServiceSku')]"
                  },
                  "privateDnsZoneId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment'), '2022-09-01').outputs.zones.value, lambda('zone', equals(lambdaVariables('zone').deploymentName, 'dns-ai')))).id]"
                  },
                  "privateEndpointSubnet": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'privateendpoints-snet')))).id]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment'), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "11696605045710241937"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]"
                    },
                    "kind": {
                      "type": "string"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Disabled"
                    },
                    "sku": {
                      "type": "string"
                    },
                    "privateEndpointSubnet": {
                      "type": "string"
                    },
                    "privateEndpointLocation": {
                      "type": "string",
                      "defaultValue": "[parameters('location')]"
                    },
                    "privateDnsZoneId": {
                      "type": "string"
                    },
                    "deployModel": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "modelName": {
                      "type": "string",
                      "nullable": true
                    },
                    "modelVersion": {
                      "type": "string",
                      "nullable": true
                    },
                    "modelCapacityType": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard",
                        "ProvisionedManaged"
                      ]
                    },
                    "modelCapacity": {
                      "type": "int",
                      "nullable": true
                    },
                    "modelFormat": {
                      "type": "string",
                      "defaultValue": "OpenAI"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Name to insert the key as secret"
                      }
                    }
                  },
                  "resources": {
                    "account": {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "networkAcls": {
                          "defaultAction": "Allow",
                          "virtualNetworkRules": [],
                          "ipRules": []
                        }
                      },
                      "sku": {
                        "name": "[parameters('sku')]"
                      }
                    },
                    "modelDeployment": {
                      "condition": "[parameters('deployModel')]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-deployment', parameters('modelName')))]",
                      "sku": {
                        "name": "[parameters('modelCapacityType')]",
                        "capacity": "[parameters('modelCapacity')]"
                      },
                      "properties": {
                        "model": {
                          "format": "[parameters('modelFormat')]",
                          "name": "[parameters('modelName')]",
                          "version": "[parameters('modelVersion')]"
                        }
                      },
                      "dependsOn": [
                        "account"
                      ]
                    },
                    "privateendpoointcognitive": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pep-{0}', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('pep-{0}', parameters('name'))]"
                          },
                          "location": {
                            "value": "[parameters('privateEndpointLocation')]"
                          },
                          "privateDnsZoneId": {
                            "value": "[parameters('privateDnsZoneId')]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                          },
                          "subResource": {
                            "value": "account"
                          },
                          "subnetId": {
                            "value": "[parameters('privateEndpointSubnet')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "14351599574430642892"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "privateLinkServiceId": {
                              "type": "string"
                            },
                            "privateDnsZoneId": {
                              "type": "string"
                            },
                            "subResource": {
                              "type": "string",
                              "allowedValues": [
                                "sites",
                                "sqlServer",
                                "mysqlServer",
                                "blob",
                                "file",
                                "queue",
                                "table",
                                "redisCache",
                                "registry",
                                "namespace",
                                "Sql",
                                "vault",
                                "Table",
                                "staticSites",
                                "configurationStores",
                                "account"
                              ]
                            }
                          },
                          "variables": {
                            "privateLinkConnectionName": "[format('prvLnk-{0}', parameters('name'))]",
                            "privateDnsZoneConfigName": "[format('prvDnsZoneConfig-{0}', parameters('name'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateLinkConnectionName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subResource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('DnsZoneGroup-{0}', parameters('name')))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[variables('privateDnsZoneConfigName')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "account"
                      ]
                    },
                    "accountKeySecret": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Key', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-Key', parameters('name'))]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "value": {
                            "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "2810329607244796464"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The KeyVault's name"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret in KeyVault."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret in the KeyVault."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2023-02-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "properties": {
                                "value": "[parameters('value')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "type": {
                              "type": "string",
                              "value": "Microsoft.KeyVault/vaults/secrets"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2023-02-01').secretUri]"
                            },
                            "uriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2023-02-01').secretUriWithVersion]"
                            },
                            "reference": {
                              "type": "string",
                              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "account"
                      ]
                    }
                  },
                  "outputs": {
                    "endpoint": {
                      "type": "string",
                      "value": "[reference('account').endpoint]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "keyReferenceUriWithVersion": {
                      "type": "string",
                      "value": "[reference('accountKeySecret').outputs.uriWithVersion.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            },
            {
              "copy": {
                "name": "openAI",
                "count": "[length(parameters('openAIDeployments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-{1}-Deployment', variables('resourceNames').openAI, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-{1}', variables('resourceNames').openAI, copyIndex())]"
                  },
                  "kind": {
                    "value": "OpenAI"
                  },
                  "location": {
                    "value": "[parameters('openAILocation')]"
                  },
                  "privateEndpointLocation": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "[parameters('openAIDeployments')[copyIndex()].openAISku]"
                  },
                  "deployModel": {
                    "value": "[parameters('openAIDeployments')[copyIndex()].deployOpenAIModel]"
                  },
                  "modelName": {
                    "value": "[parameters('openAIDeployments')[copyIndex()].openAIModelName]"
                  },
                  "modelVersion": {
                    "value": "[parameters('openAIDeployments')[copyIndex()].openAIModelVersion]"
                  },
                  "modelCapacityType": {
                    "value": "[parameters('openAIDeployments')[copyIndex()].openAIModelCapacityType]"
                  },
                  "modelCapacity": {
                    "value": "[parameters('openAIDeployments')[copyIndex()].openAIModelCapacity]"
                  },
                  "privateDnsZoneId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment'), '2022-09-01').outputs.zones.value, lambda('zone', equals(lambdaVariables('zone').deploymentName, 'dns-openai')))).id]"
                  },
                  "privateEndpointSubnet": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'privateendpoints-snet')))).id]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment'), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "11696605045710241937"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]"
                    },
                    "kind": {
                      "type": "string"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Disabled"
                    },
                    "sku": {
                      "type": "string"
                    },
                    "privateEndpointSubnet": {
                      "type": "string"
                    },
                    "privateEndpointLocation": {
                      "type": "string",
                      "defaultValue": "[parameters('location')]"
                    },
                    "privateDnsZoneId": {
                      "type": "string"
                    },
                    "deployModel": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "modelName": {
                      "type": "string",
                      "nullable": true
                    },
                    "modelVersion": {
                      "type": "string",
                      "nullable": true
                    },
                    "modelCapacityType": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard",
                        "ProvisionedManaged"
                      ]
                    },
                    "modelCapacity": {
                      "type": "int",
                      "nullable": true
                    },
                    "modelFormat": {
                      "type": "string",
                      "defaultValue": "OpenAI"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Name to insert the key as secret"
                      }
                    }
                  },
                  "resources": {
                    "account": {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "networkAcls": {
                          "defaultAction": "Allow",
                          "virtualNetworkRules": [],
                          "ipRules": []
                        }
                      },
                      "sku": {
                        "name": "[parameters('sku')]"
                      }
                    },
                    "modelDeployment": {
                      "condition": "[parameters('deployModel')]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-deployment', parameters('modelName')))]",
                      "sku": {
                        "name": "[parameters('modelCapacityType')]",
                        "capacity": "[parameters('modelCapacity')]"
                      },
                      "properties": {
                        "model": {
                          "format": "[parameters('modelFormat')]",
                          "name": "[parameters('modelName')]",
                          "version": "[parameters('modelVersion')]"
                        }
                      },
                      "dependsOn": [
                        "account"
                      ]
                    },
                    "privateendpoointcognitive": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pep-{0}', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('pep-{0}', parameters('name'))]"
                          },
                          "location": {
                            "value": "[parameters('privateEndpointLocation')]"
                          },
                          "privateDnsZoneId": {
                            "value": "[parameters('privateDnsZoneId')]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                          },
                          "subResource": {
                            "value": "account"
                          },
                          "subnetId": {
                            "value": "[parameters('privateEndpointSubnet')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "14351599574430642892"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "privateLinkServiceId": {
                              "type": "string"
                            },
                            "privateDnsZoneId": {
                              "type": "string"
                            },
                            "subResource": {
                              "type": "string",
                              "allowedValues": [
                                "sites",
                                "sqlServer",
                                "mysqlServer",
                                "blob",
                                "file",
                                "queue",
                                "table",
                                "redisCache",
                                "registry",
                                "namespace",
                                "Sql",
                                "vault",
                                "Table",
                                "staticSites",
                                "configurationStores",
                                "account"
                              ]
                            }
                          },
                          "variables": {
                            "privateLinkConnectionName": "[format('prvLnk-{0}', parameters('name'))]",
                            "privateDnsZoneConfigName": "[format('prvDnsZoneConfig-{0}', parameters('name'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateLinkConnectionName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subResource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('DnsZoneGroup-{0}', parameters('name')))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[variables('privateDnsZoneConfigName')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "account"
                      ]
                    },
                    "accountKeySecret": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Key', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-Key', parameters('name'))]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "value": {
                            "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "2810329607244796464"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The KeyVault's name"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret in KeyVault."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret in the KeyVault."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2023-02-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "properties": {
                                "value": "[parameters('value')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "type": {
                              "type": "string",
                              "value": "Microsoft.KeyVault/vaults/secrets"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2023-02-01').secretUri]"
                            },
                            "uriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2023-02-01').secretUriWithVersion]"
                            },
                            "reference": {
                              "type": "string",
                              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "account"
                      ]
                    }
                  },
                  "outputs": {
                    "endpoint": {
                      "type": "string",
                      "value": "[reference('account').endpoint]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "keyReferenceUriWithVersion": {
                      "type": "string",
                      "value": "[reference('accountKeySecret').outputs.uriWithVersion.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('APIM-{0}-Deployment', variables('resourceNames').apim)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').apim]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "skuName": {
                    "value": "[parameters('apimSKU')]"
                  },
                  "apimSubnetId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'apim-snet')))).id]"
                  },
                  "apimDnsZoneName": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment'), '2022-09-01').outputs.zones.value, lambda('zone', equals(lambdaVariables('zone').deploymentName, 'dns-apim')))).dnsName]"
                  },
                  "aiBackends": {
                    "value": [
                      {
                        "name": "OpenAIPrimaryEndpoint",
                        "description": "Primary OpenAI Service",
                        "endpoint": "[format('{0}openai', reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 0)), '2022-09-01').outputs.endpoint.value)]",
                        "keyReferenceUri": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 0)), '2022-09-01').outputs.keyReferenceUriWithVersion.value]"
                      },
                      {
                        "name": "OpenAISecondaryEndpoint",
                        "description": "Secondary OpenAI Service",
                        "endpoint": "[format('{0}openai', reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 1)), '2022-09-01').outputs.endpoint.value)]",
                        "keyReferenceUri": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 1)), '2022-09-01').outputs.keyReferenceUriWithVersion.value]"
                      },
                      {
                        "name": "LanguageEndpoint",
                        "description": "AI Language (for PII)",
                        "endpoint": "[format('{0}/language', reference(resourceId('Microsoft.Resources/deployments', format('{0}-Deployment', variables('resourceNames').languageService)), '2022-09-01').outputs.endpoint.value)]",
                        "keyReferenceUri": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-Deployment', variables('resourceNames').languageService)), '2022-09-01').outputs.keyReferenceUriWithVersion.value]"
                      }
                    ]
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment'), '2022-09-01').outputs.name.value]"
                  },
                  "aiProducts": {
                    "value": "[parameters('aiProducts')]"
                  },
                  "appInsightsConnectionStringReference": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('AppInsights-{0}-Deployment', variables('resourceNames').applicationInsights)), '2022-09-01').outputs.keyReferenceUriWithVersion.value]"
                  },
                  "appInsightsId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('AppInsights-{0}-Deployment', variables('resourceNames').applicationInsights)), '2022-09-01').outputs.id.value]"
                  },
                  "appInsightsName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('AppInsights-{0}-Deployment', variables('resourceNames').applicationInsights)), '2022-09-01').outputs.name.value]"
                  },
                  "openAIDeployments": {
                    "value": "[parameters('openAIDeployments')]"
                  },
                  "openAIResourceName": {
                    "value": "[variables('resourceNames').openAI]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17959148379135011580"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "skuCapacity": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "maxValue": 4,
                      "metadata": {
                        "description": "The capacity of this API Management service -0 will be used for 'Consumption' sku."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "allowedValues": [
                        "Developer",
                        "Standard",
                        "Premium",
                        "Consumption"
                      ],
                      "metadata": {
                        "description": "The pricing tier of this API Management service"
                      }
                    },
                    "userAssignedIdentityId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "If provided then the identity type will be set to UserAssigned. If passed empty then the identity type will be set to SystemAssigned"
                      }
                    },
                    "publisherEmail": {
                      "type": "string",
                      "defaultValue": "system@gsis.gr"
                    },
                    "publisherName": {
                      "type": "string",
                      "defaultValue": "system"
                    },
                    "apimSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet id of the subnet to deploy the API Management service to."
                      }
                    },
                    "virtualNetworkType": {
                      "type": "string",
                      "defaultValue": "Internal"
                    },
                    "apimDnsZoneName": {
                      "type": "string"
                    },
                    "aiProducts": {
                      "type": "array"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "aiBackends": {
                      "type": "array"
                    },
                    "appInsightsConnectionStringReference": {
                      "type": "string"
                    },
                    "appInsightsId": {
                      "type": "string"
                    },
                    "appInsightsName": {
                      "type": "string"
                    },
                    "openAIDeployments": {
                      "type": "array"
                    },
                    "openAIResourceName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "openapi": "3.0.0",
                      "info": {
                        "title": "Azure OpenAI Service API",
                        "description": "Azure OpenAI APIs for completions and search",
                        "version": "2024-02-01"
                      },
                      "servers": [
                        {
                          "url": "https://{endpoint}/openai",
                          "variables": {
                            "endpoint": {
                              "default": "your-resource-name.openai.azure.com"
                            }
                          }
                        }
                      ],
                      "security": [
                        {
                          "bearer": [
                            "api.read"
                          ]
                        },
                        {
                          "apiKey": []
                        }
                      ],
                      "paths": {
                        "/deployments/{deployment-id}/completions": {
                          "post": {
                            "summary": "Creates a completion for the provided prompt, parameters and chosen model.",
                            "operationId": "Completions_Create",
                            "parameters": [
                              {
                                "in": "path",
                                "name": "deployment-id",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "davinci",
                                  "description": "Deployment id of the model which was deployed."
                                }
                              },
                              {
                                "in": "query",
                                "name": "api-version",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "2024-02-01",
                                  "description": "api version"
                                }
                              }
                            ],
                            "requestBody": {
                              "required": true,
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "type": "object",
                                    "properties": {
                                      "prompt": {
                                        "description": "The prompt(s) to generate completions for, encoded as a string or array of strings.\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048.",
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "default": "",
                                            "example": "This is a test.",
                                            "nullable": true
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "default": "",
                                              "example": "This is a test.",
                                              "nullable": false
                                            },
                                            "description": "Array size minimum of 1 and maximum of 2048"
                                          }
                                        ]
                                      },
                                      "max_tokens": {
                                        "description": "The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096). Has minimum of 0.",
                                        "type": "integer",
                                        "default": 16,
                                        "example": 16,
                                        "nullable": true
                                      },
                                      "temperature": {
                                        "description": "What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.\nWe generally recommend altering this or top_p but not both.",
                                        "type": "number",
                                        "default": 1,
                                        "example": 1,
                                        "nullable": true
                                      },
                                      "top_p": {
                                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or temperature but not both.",
                                        "type": "number",
                                        "default": 1,
                                        "example": 1,
                                        "nullable": true
                                      },
                                      "logit_bias": {
                                        "description": "Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {\"50256\" &#58; -100} to prevent the <|endoftext|> token from being generated.",
                                        "type": "object",
                                        "nullable": false
                                      },
                                      "user": {
                                        "description": "A unique identifier representing your end-user, which can help monitoring and detecting abuse",
                                        "type": "string",
                                        "nullable": false
                                      },
                                      "n": {
                                        "description": "How many completions to generate for each prompt. Minimum of 1 and maximum of 128 allowed.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.",
                                        "type": "integer",
                                        "default": 1,
                                        "example": 1,
                                        "nullable": true
                                      },
                                      "stream": {
                                        "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.",
                                        "type": "boolean",
                                        "nullable": true,
                                        "default": false
                                      },
                                      "logprobs": {
                                        "description": "Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.\nMinimum of 0 and maximum of 5 allowed.",
                                        "type": "integer",
                                        "default": null,
                                        "nullable": true
                                      },
                                      "suffix": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "The suffix that comes after a completion of inserted text."
                                      },
                                      "echo": {
                                        "description": "Echo back the prompt in addition to the completion",
                                        "type": "boolean",
                                        "default": false,
                                        "nullable": true
                                      },
                                      "stop": {
                                        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "default": "<|endoftext|>",
                                            "example": "\n",
                                            "nullable": true
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "example": "\n",
                                              "nullable": false
                                            },
                                            "description": "Array minimum size of 1 and maximum of 4"
                                          }
                                        ]
                                      },
                                      "completion_config": {
                                        "type": "string",
                                        "nullable": true
                                      },
                                      "presence_penalty": {
                                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
                                        "type": "number",
                                        "default": 0
                                      },
                                      "frequency_penalty": {
                                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                                        "type": "number",
                                        "default": 0
                                      },
                                      "best_of": {
                                        "description": "Generates best_of completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\nWhen used with n, best_of controls the number of candidate completions and n specifies how many to return - best_of must be greater than n.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop. Has maximum value of 128.",
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "example": {
                                    "prompt": "Negate the following sentence.The price for bubblegum increased on thursday.\n\n Negated Sentence:",
                                    "max_tokens": 50
                                  }
                                }
                              }
                            },
                            "responses": {
                              "200": {
                                "description": "OK",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "object": {
                                          "type": "string"
                                        },
                                        "created": {
                                          "type": "integer"
                                        },
                                        "model": {
                                          "type": "string"
                                        },
                                        "prompt_filter_results": {
                                          "$ref": "#/components/schemas/promptFilterResults"
                                        },
                                        "choices": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "text": {
                                                "type": "string"
                                              },
                                              "index": {
                                                "type": "integer"
                                              },
                                              "logprobs": {
                                                "type": "object",
                                                "properties": {
                                                  "tokens": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "token_logprobs": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "top_logprobs": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "additionalProperties": {
                                                        "type": "number"
                                                      }
                                                    }
                                                  },
                                                  "text_offset": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                },
                                                "nullable": true
                                              },
                                              "finish_reason": {
                                                "type": "string"
                                              },
                                              "content_filter_results": {
                                                "$ref": "#/components/schemas/contentFilterChoiceResults"
                                              }
                                            }
                                          }
                                        },
                                        "usage": {
                                          "type": "object",
                                          "properties": {
                                            "completion_tokens": {
                                              "type": "number",
                                              "format": "int32"
                                            },
                                            "prompt_tokens": {
                                              "type": "number",
                                              "format": "int32"
                                            },
                                            "total_tokens": {
                                              "type": "number",
                                              "format": "int32"
                                            }
                                          },
                                          "required": [
                                            "prompt_tokens",
                                            "total_tokens",
                                            "completion_tokens"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "object",
                                        "created",
                                        "model",
                                        "choices"
                                      ]
                                    },
                                    "example": {
                                      "model": "davinci",
                                      "object": "text_completion",
                                      "id": "cmpl-4509KAos68kxOqpE2uYGw81j6m7uo",
                                      "created": 1637097562,
                                      "choices": [
                                        {
                                          "index": 0,
                                          "text": "The price for bubblegum decreased on thursday.",
                                          "logprobs": null,
                                          "finish_reason": "stop"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "headers": {
                                  "apim-request-id": {
                                    "description": "Request ID for troubleshooting purposes",
                                    "schema": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "default": {
                                "description": "Service unavailable",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "$ref": "#/components/schemas/errorResponse"
                                    }
                                  }
                                },
                                "headers": {
                                  "apim-request-id": {
                                    "description": "Request ID for troubleshooting purposes",
                                    "schema": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-examples": {
                              "Create a completion.": {
                                "$ref": "./examples/completions.json"
                              }
                            }
                          }
                        },
                        "/deployments/{deployment-id}/embeddings": {
                          "post": {
                            "summary": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.",
                            "operationId": "embeddings_create",
                            "parameters": [
                              {
                                "in": "path",
                                "name": "deployment-id",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "ada-search-index-v1"
                                },
                                "description": "The deployment id of the model which was deployed."
                              },
                              {
                                "in": "query",
                                "name": "api-version",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "2024-02-01",
                                  "description": "api version"
                                }
                              }
                            ],
                            "requestBody": {
                              "required": true,
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "type": "object",
                                    "additionalProperties": true,
                                    "properties": {
                                      "input": {
                                        "description": "Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.\nUnless you are embedding code, we suggest replacing newlines (\\n) in your input with a single space, as we have observed inferior results when newlines are present.",
                                        "oneOf": [
                                          {
                                            "type": "string",
                                            "default": "",
                                            "example": "This is a test.",
                                            "nullable": true
                                          },
                                          {
                                            "type": "array",
                                            "minItems": 1,
                                            "maxItems": 2048,
                                            "items": {
                                              "type": "string",
                                              "minLength": 1,
                                              "example": "This is a test.",
                                              "nullable": false
                                            }
                                          }
                                        ]
                                      },
                                      "user": {
                                        "description": "A unique identifier representing your end-user, which can help monitoring and detecting abuse.",
                                        "type": "string",
                                        "nullable": false
                                      },
                                      "input_type": {
                                        "description": "input type of embedding search to use",
                                        "type": "string",
                                        "example": "query"
                                      }
                                    },
                                    "required": [
                                      "input"
                                    ]
                                  }
                                }
                              }
                            },
                            "responses": {
                              "200": {
                                "description": "OK",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "type": "object",
                                      "properties": {
                                        "object": {
                                          "type": "string"
                                        },
                                        "model": {
                                          "type": "string"
                                        },
                                        "data": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "index": {
                                                "type": "integer"
                                              },
                                              "object": {
                                                "type": "string"
                                              },
                                              "embedding": {
                                                "type": "array",
                                                "items": {
                                                  "type": "number"
                                                }
                                              }
                                            },
                                            "required": [
                                              "index",
                                              "object",
                                              "embedding"
                                            ]
                                          }
                                        },
                                        "usage": {
                                          "type": "object",
                                          "properties": {
                                            "prompt_tokens": {
                                              "type": "integer"
                                            },
                                            "total_tokens": {
                                              "type": "integer"
                                            }
                                          },
                                          "required": [
                                            "prompt_tokens",
                                            "total_tokens"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "object",
                                        "model",
                                        "data",
                                        "usage"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-examples": {
                              "Create a embeddings.": {
                                "$ref": "./examples/embeddings.json"
                              }
                            }
                          }
                        },
                        "/deployments/{deployment-id}/chat/completions": {
                          "post": {
                            "summary": "Creates a completion for the chat message",
                            "operationId": "ChatCompletions_Create",
                            "parameters": [
                              {
                                "in": "path",
                                "name": "deployment-id",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "description": "Deployment id of the model which was deployed."
                                }
                              },
                              {
                                "in": "query",
                                "name": "api-version",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "2024-02-01",
                                  "description": "api version"
                                }
                              }
                            ],
                            "requestBody": {
                              "required": true,
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "$ref": "#/components/schemas/createChatCompletionRequest"
                                  }
                                }
                              }
                            },
                            "responses": {
                              "200": {
                                "description": "OK",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "$ref": "#/components/schemas/createChatCompletionResponse"
                                    }
                                  }
                                },
                                "headers": {
                                  "apim-request-id": {
                                    "description": "Request ID for troubleshooting purposes",
                                    "schema": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "default": {
                                "description": "Service unavailable",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "$ref": "#/components/schemas/errorResponse"
                                    }
                                  }
                                },
                                "headers": {
                                  "apim-request-id": {
                                    "description": "Request ID for troubleshooting purposes",
                                    "schema": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-examples": {
                              "Create a chat completion.": {
                                "$ref": "./examples/chat_completions.json"
                              },
                              "Creates a completion based on Azure Search data and system-assigned managed identity.": {
                                "$ref": "./examples/chat_completions_azure_search_minimum.json"
                              },
                              "Creates a completion based on Azure Search vector data, previous assistant message and user-assigned managed identity.": {
                                "$ref": "./examples/chat_completions_azure_search_advanced.json"
                              },
                              "Creates a completion for the provided Azure Cosmos DB.": {
                                "$ref": "./examples/chat_completions_cosmos_db.json"
                              }
                            }
                          }
                        },
                        "/deployments/{deployment-id}/audio/transcriptions": {
                          "post": {
                            "summary": "Transcribes audio into the input language.",
                            "operationId": "Transcriptions_Create",
                            "parameters": [
                              {
                                "in": "path",
                                "name": "deployment-id",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "whisper",
                                  "description": "Deployment id of the whisper model."
                                }
                              },
                              {
                                "in": "query",
                                "name": "api-version",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "2024-02-01",
                                  "description": "api version"
                                }
                              }
                            ],
                            "requestBody": {
                              "required": true,
                              "content": {
                                "multipart/form-data": {
                                  "schema": {
                                    "$ref": "#/components/schemas/createTranscriptionRequest"
                                  }
                                }
                              }
                            },
                            "responses": {
                              "200": {
                                "description": "OK",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/audioResponse"
                                        },
                                        {
                                          "$ref": "#/components/schemas/audioVerboseResponse"
                                        }
                                      ]
                                    }
                                  },
                                  "text/plain": {
                                    "schema": {
                                      "type": "string",
                                      "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt)."
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-examples": {
                              "Create an audio transcription with json response format.": {
                                "$ref": "./examples/audio_transcription_object.json"
                              },
                              "Create an audio transcription with text response format.": {
                                "$ref": "./examples/audio_transcription_text.json"
                              }
                            }
                          }
                        },
                        "/deployments/{deployment-id}/audio/translations": {
                          "post": {
                            "summary": "Transcribes and translates input audio into English text.",
                            "operationId": "Translations_Create",
                            "parameters": [
                              {
                                "in": "path",
                                "name": "deployment-id",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "whisper",
                                  "description": "Deployment id of the whisper model which was deployed."
                                }
                              },
                              {
                                "in": "query",
                                "name": "api-version",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "2024-02-01",
                                  "description": "api version"
                                }
                              }
                            ],
                            "requestBody": {
                              "required": true,
                              "content": {
                                "multipart/form-data": {
                                  "schema": {
                                    "$ref": "#/components/schemas/createTranslationRequest"
                                  }
                                }
                              }
                            },
                            "responses": {
                              "200": {
                                "description": "OK",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/audioResponse"
                                        },
                                        {
                                          "$ref": "#/components/schemas/audioVerboseResponse"
                                        }
                                      ]
                                    }
                                  },
                                  "text/plain": {
                                    "schema": {
                                      "type": "string",
                                      "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt)."
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-examples": {
                              "Create an audio translation with json response format.": {
                                "$ref": "./examples/audio_translation_object.json"
                              },
                              "Create an audio translation with text response format.": {
                                "$ref": "./examples/audio_translation_text.json"
                              }
                            }
                          }
                        },
                        "/deployments/{deployment-id}/images/generations": {
                          "post": {
                            "summary": "Generates a batch of images from a text caption on a given DALLE model deployment",
                            "operationId": "ImageGenerations_Create",
                            "requestBody": {
                              "required": true,
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "$ref": "#/components/schemas/imageGenerationsRequest"
                                  }
                                }
                              }
                            },
                            "parameters": [
                              {
                                "in": "path",
                                "name": "deployment-id",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "dalle-deployment",
                                  "description": "Deployment id of the dalle model which was deployed."
                                }
                              },
                              {
                                "in": "query",
                                "name": "api-version",
                                "required": true,
                                "schema": {
                                  "type": "string",
                                  "example": "2024-02-01",
                                  "description": "api version"
                                }
                              }
                            ],
                            "responses": {
                              "200": {
                                "description": "Ok",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "$ref": "#/components/schemas/generateImagesResponse"
                                    }
                                  }
                                }
                              },
                              "default": {
                                "description": "An error occurred.",
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "$ref": "#/components/schemas/dalleErrorResponse"
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-examples": {
                              "Create an image.": {
                                "$ref": "./examples/image_generation.json"
                              }
                            }
                          }
                        }
                      },
                      "components": {
                        "schemas": {
                          "errorResponse": {
                            "type": "object",
                            "properties": {
                              "error": {
                                "$ref": "#/components/schemas/error"
                              }
                            }
                          },
                          "errorBase": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            }
                          },
                          "error": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/errorBase"
                              }
                            ],
                            "properties": {
                              "param": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "inner_error": {
                                "$ref": "#/components/schemas/innerError"
                              }
                            }
                          },
                          "innerError": {
                            "description": "Inner error with additional details.",
                            "type": "object",
                            "properties": {
                              "code": {
                                "$ref": "#/components/schemas/innerErrorCode"
                              },
                              "content_filter_results": {
                                "$ref": "#/components/schemas/contentFilterPromptResults"
                              }
                            }
                          },
                          "innerErrorCode": {
                            "description": "Error codes for the inner error object.",
                            "enum": [
                              "ResponsibleAIPolicyViolation"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "name": "InnerErrorCode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "ResponsibleAIPolicyViolation",
                                  "description": "The prompt violated one of more content filter rules."
                                }
                              ]
                            }
                          },
                          "dalleErrorResponse": {
                            "type": "object",
                            "properties": {
                              "error": {
                                "$ref": "#/components/schemas/dalleError"
                              }
                            }
                          },
                          "dalleError": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/errorBase"
                              }
                            ],
                            "properties": {
                              "param": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "inner_error": {
                                "$ref": "#/components/schemas/dalleInnerError"
                              }
                            }
                          },
                          "dalleInnerError": {
                            "description": "Inner error with additional details.",
                            "type": "object",
                            "properties": {
                              "code": {
                                "$ref": "#/components/schemas/innerErrorCode"
                              },
                              "content_filter_results": {
                                "$ref": "#/components/schemas/dalleFilterResults"
                              },
                              "revised_prompt": {
                                "type": "string",
                                "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                              }
                            }
                          },
                          "contentFilterResultBase": {
                            "type": "object",
                            "properties": {
                              "filtered": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "filtered"
                            ]
                          },
                          "contentFilterSeverityResult": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/contentFilterResultBase"
                              },
                              {
                                "properties": {
                                  "severity": {
                                    "type": "string",
                                    "enum": [
                                      "safe",
                                      "low",
                                      "medium",
                                      "high"
                                    ],
                                    "x-ms-enum": {
                                      "name": "ContentFilterSeverity",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "value": "safe",
                                          "description": "General content or related content in generic or non-harmful contexts."
                                        },
                                        {
                                          "value": "low",
                                          "description": "Harmful content at a low intensity and risk level."
                                        },
                                        {
                                          "value": "medium",
                                          "description": "Harmful content at a medium intensity and risk level."
                                        },
                                        {
                                          "value": "high",
                                          "description": "Harmful content at a high intensity and risk level."
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ],
                            "required": [
                              "severity",
                              "filtered"
                            ]
                          },
                          "contentFilterDetectedResult": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/contentFilterResultBase"
                              },
                              {
                                "properties": {
                                  "detected": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            ],
                            "required": [
                              "detected",
                              "filtered"
                            ]
                          },
                          "contentFilterDetectedWithCitationResult": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                              },
                              {
                                "properties": {
                                  "citation": {
                                    "type": "object",
                                    "properties": {
                                      "URL": {
                                        "type": "string"
                                      },
                                      "license": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ],
                            "required": [
                              "detected",
                              "filtered"
                            ]
                          },
                          "contentFilterResultsBase": {
                            "type": "object",
                            "description": "Information about the content filtering results.",
                            "properties": {
                              "sexual": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "violence": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "hate": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "self_harm": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "profanity": {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                              },
                              "error": {
                                "$ref": "#/components/schemas/errorBase"
                              }
                            }
                          },
                          "contentFilterPromptResults": {
                            "type": "object",
                            "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/contentFilterResultsBase"
                              },
                              {
                                "properties": {
                                  "jailbreak": {
                                    "$ref": "#/components/schemas/contentFilterDetectedResult"
                                  }
                                }
                              }
                            ]
                          },
                          "contentFilterChoiceResults": {
                            "type": "object",
                            "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/contentFilterResultsBase"
                              },
                              {
                                "properties": {
                                  "protected_material_text": {
                                    "$ref": "#/components/schemas/contentFilterDetectedResult"
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "protected_material_code": {
                                    "$ref": "#/components/schemas/contentFilterDetectedWithCitationResult"
                                  }
                                }
                              }
                            ]
                          },
                          "promptFilterResult": {
                            "type": "object",
                            "description": "Content filtering results for a single prompt in the request.",
                            "properties": {
                              "prompt_index": {
                                "type": "integer"
                              },
                              "content_filter_results": {
                                "$ref": "#/components/schemas/contentFilterPromptResults"
                              }
                            }
                          },
                          "promptFilterResults": {
                            "type": "array",
                            "description": "Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders.",
                            "items": {
                              "$ref": "#/components/schemas/promptFilterResult"
                            }
                          },
                          "dalleContentFilterResults": {
                            "type": "object",
                            "description": "Information about the content filtering results.",
                            "properties": {
                              "sexual": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "violence": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "hate": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              },
                              "self_harm": {
                                "$ref": "#/components/schemas/contentFilterSeverityResult"
                              }
                            }
                          },
                          "dalleFilterResults": {
                            "type": "object",
                            "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/dalleContentFilterResults"
                              },
                              {
                                "properties": {
                                  "profanity": {
                                    "$ref": "#/components/schemas/contentFilterDetectedResult"
                                  },
                                  "jailbreak": {
                                    "$ref": "#/components/schemas/contentFilterDetectedResult"
                                  }
                                }
                              }
                            ]
                          },
                          "chatCompletionsRequestCommon": {
                            "type": "object",
                            "properties": {
                              "temperature": {
                                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 2,
                                "default": 1,
                                "example": 1,
                                "nullable": true
                              },
                              "top_p": {
                                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1,
                                "default": 1,
                                "example": 1,
                                "nullable": true
                              },
                              "stream": {
                                "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
                                "type": "boolean",
                                "nullable": true,
                                "default": false
                              },
                              "stop": {
                                "description": "Up to 4 sequences where the API will stop generating further tokens.",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "nullable": false
                                    },
                                    "minItems": 1,
                                    "maxItems": 4,
                                    "description": "Array minimum size of 1 and maximum of 4"
                                  }
                                ],
                                "default": null
                              },
                              "max_tokens": {
                                "description": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).",
                                "type": "integer",
                                "default": 4096
                              },
                              "presence_penalty": {
                                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
                                "type": "number",
                                "default": 0,
                                "minimum": -2,
                                "maximum": 2
                              },
                              "frequency_penalty": {
                                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                                "type": "number",
                                "default": 0,
                                "minimum": -2,
                                "maximum": 2
                              },
                              "logit_bias": {
                                "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
                                "type": "object",
                                "nullable": true
                              },
                              "user": {
                                "description": "A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.",
                                "type": "string",
                                "example": "user-1234",
                                "nullable": false
                              }
                            }
                          },
                          "createChatCompletionRequest": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionsRequestCommon"
                              },
                              {
                                "properties": {
                                  "messages": {
                                    "description": "A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).",
                                    "type": "array",
                                    "minItems": 1,
                                    "items": {
                                      "$ref": "#/components/schemas/chatCompletionRequestMessage"
                                    }
                                  },
                                  "data_sources": {
                                    "type": "array",
                                    "description": "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI.",
                                    "items": {
                                      "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                                    }
                                  },
                                  "n": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 128,
                                    "default": 1,
                                    "example": 1,
                                    "nullable": true,
                                    "description": "How many chat completion choices to generate for each input message."
                                  },
                                  "seed": {
                                    "type": "integer",
                                    "minimum": -9223372036854775808,
                                    "maximum": 9223372036854775807,
                                    "default": 0,
                                    "example": 1,
                                    "nullable": true,
                                    "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend."
                                  },
                                  "response_format": {
                                    "type": "object",
                                    "description": "An object specifying the format that the model must output. Used to enable JSON mode.",
                                    "properties": {
                                      "type": {
                                        "$ref": "#/components/schemas/chatCompletionResponseFormat"
                                      }
                                    }
                                  },
                                  "tools": {
                                    "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.",
                                    "type": "array",
                                    "minItems": 1,
                                    "items": {
                                      "$ref": "#/components/schemas/chatCompletionTool"
                                    }
                                  },
                                  "tool_choice": {
                                    "$ref": "#/components/schemas/chatCompletionToolChoiceOption"
                                  },
                                  "functions": {
                                    "description": "Deprecated in favor of `tools`. A list of functions the model may generate JSON inputs for.",
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 128,
                                    "items": {
                                      "$ref": "#/components/schemas/chatCompletionFunction"
                                    }
                                  },
                                  "function_call": {
                                    "description": "Deprecated in favor of `tool_choice`. Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.",
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "enum": [
                                          "none",
                                          "auto"
                                        ],
                                        "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function."
                                      },
                                      {
                                        "type": "object",
                                        "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the function to call."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            "required": [
                              "messages"
                            ]
                          },
                          "chatCompletionResponseFormat": {
                            "type": "string",
                            "enum": [
                              "text",
                              "json_object"
                            ],
                            "default": "text",
                            "example": "json_object",
                            "nullable": true,
                            "description": "Setting to `json_object` enables JSON mode. This guarantees that the message the model generates is valid JSON.",
                            "x-ms-enum": {
                              "name": "ChatCompletionResponseFormat",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "text",
                                  "description": "Response format is a plain text string."
                                },
                                {
                                  "value": "json_object",
                                  "description": "Response format is a JSON object."
                                }
                              ]
                            }
                          },
                          "chatCompletionFunction": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of what the function does."
                              },
                              "parameters": {
                                "$ref": "#/components/schemas/chatCompletionFunctionParameters"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "chatCompletionFunctionParameters": {
                            "type": "object",
                            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.",
                            "additionalProperties": true
                          },
                          "chatCompletionRequestMessage": {
                            "type": "object",
                            "properties": {
                              "role": {
                                "$ref": "#/components/schemas/chatCompletionRequestMessageRole"
                              }
                            },
                            "discriminator": {
                              "propertyName": "role",
                              "mapping": {
                                "system": "#/components/schemas/chatCompletionRequestMessageSystem",
                                "user": "#/components/schemas/chatCompletionRequestMessageUser",
                                "assistant": "#/components/schemas/chatCompletionRequestMessageAssistant",
                                "tool": "#/components/schemas/chatCompletionRequestMessageTool",
                                "function": "#/components/schemas/chatCompletionRequestMessageFunction"
                              }
                            },
                            "required": [
                              "role"
                            ]
                          },
                          "chatCompletionRequestMessageRole": {
                            "type": "string",
                            "enum": [
                              "system",
                              "user",
                              "assistant",
                              "tool",
                              "function"
                            ],
                            "description": "The role of the messages author.",
                            "x-ms-enum": {
                              "name": "ChatCompletionRequestMessageRole",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "system",
                                  "description": "The message author role is system."
                                },
                                {
                                  "value": "user",
                                  "description": "The message author role is user."
                                },
                                {
                                  "value": "assistant",
                                  "description": "The message author role is assistant."
                                },
                                {
                                  "value": "tool",
                                  "description": "The message author role is tool."
                                },
                                {
                                  "value": "function",
                                  "description": "Deprecated. The message author role is function."
                                }
                              ]
                            }
                          },
                          "chatCompletionRequestMessageSystem": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessage"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "type": "string",
                                    "description": "The contents of the message.",
                                    "nullable": true
                                  }
                                }
                              }
                            ],
                            "required": [
                              "content"
                            ]
                          },
                          "chatCompletionRequestMessageUser": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessage"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "description": "The contents of the message."
                                      },
                                      {
                                        "type": "array",
                                        "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.",
                                        "minimum": 1,
                                        "items": {
                                          "$ref": "#/components/schemas/chatCompletionRequestMessageContentPart"
                                        }
                                      }
                                    ],
                                    "nullable": true
                                  }
                                }
                              }
                            ],
                            "required": [
                              "content"
                            ]
                          },
                          "chatCompletionRequestMessageContentPart": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartType"
                              }
                            },
                            "discriminator": {
                              "propertyName": "type",
                              "mapping": {
                                "text": "#/components/schemas/chatCompletionRequestMessageContentPartText",
                                "image_url": "#/components/schemas/chatCompletionRequestMessageContentPartImage"
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          "chatCompletionRequestMessageContentPartType": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image_url"
                            ],
                            "description": "The type of the content part.",
                            "x-ms-enum": {
                              "name": "ChatCompletionRequestMessageContentPartType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "text",
                                  "description": "The content part type is text."
                                },
                                {
                                  "value": "image_url",
                                  "description": "The content part type is image_url."
                                }
                              ]
                            }
                          },
                          "chatCompletionRequestMessageContentPartText": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessageContentPart"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string",
                                    "description": "The text content."
                                  }
                                }
                              }
                            ],
                            "required": [
                              "text"
                            ]
                          },
                          "chatCompletionRequestMessageContentPartImage": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessageContentPart"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "url": {
                                    "type": "string",
                                    "description": "Either a URL of the image or the base64 encoded image data.",
                                    "format": "uri"
                                  },
                                  "detail": {
                                    "$ref": "#/components/schemas/imageDetailLevel"
                                  }
                                }
                              }
                            ],
                            "required": [
                              "url"
                            ]
                          },
                          "imageDetailLevel": {
                            "type": "string",
                            "description": "Specifies the detail level of the image.",
                            "enum": [
                              "auto",
                              "low",
                              "high"
                            ],
                            "default": "auto",
                            "x-ms-enum": {
                              "name": "ImageDetailLevel",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "auto",
                                  "description": "The image detail level is auto."
                                },
                                {
                                  "value": "low",
                                  "description": "The image detail level is low."
                                },
                                {
                                  "value": "high",
                                  "description": "The image detail level is high."
                                }
                              ]
                            }
                          },
                          "chatCompletionRequestMessageAssistant": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessage"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "type": "string",
                                    "description": "The contents of the message.",
                                    "nullable": true
                                  },
                                  "tool_calls": {
                                    "type": "array",
                                    "description": "The tool calls generated by the model, such as function calls.",
                                    "items": {
                                      "$ref": "#/components/schemas/chatCompletionMessageToolCall"
                                    }
                                  },
                                  "context": {
                                    "$ref": "#/components/schemas/azureChatExtensionsMessageContext"
                                  }
                                }
                              }
                            ],
                            "required": [
                              "content"
                            ]
                          },
                          "azureChatExtensionConfiguration": {
                            "required": [
                              "type"
                            ],
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/azureChatExtensionType"
                              }
                            },
                            "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
                            "discriminator": {
                              "propertyName": "type",
                              "mapping": {
                                "azure_search": "#/components/schemas/azureSearchChatExtensionConfiguration",
                                "azure_cosmos_db": "#/components/schemas/azureCosmosDBChatExtensionConfiguration"
                              }
                            }
                          },
                          "azureChatExtensionType": {
                            "type": "string",
                            "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
                            "enum": [
                              "azure_search",
                              "azure_cosmos_db"
                            ],
                            "x-ms-enum": {
                              "name": "AzureChatExtensionType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "azureSearch",
                                  "value": "azure_search",
                                  "description": "Represents the use of Azure Search as an Azure OpenAI chat extension."
                                },
                                {
                                  "name": "azureCosmosDB",
                                  "value": "azure_cosmos_db",
                                  "description": "Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension."
                                }
                              ]
                            }
                          },
                          "azureSearchChatExtensionConfiguration": {
                            "required": [
                              "parameters"
                            ],
                            "description": "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                              },
                              {
                                "properties": {
                                  "parameters": {
                                    "$ref": "#/components/schemas/azureSearchChatExtensionParameters"
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "azure_search"
                          },
                          "azureSearchChatExtensionParameters": {
                            "required": [
                              "authentication",
                              "endpoint",
                              "index_name"
                            ],
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                                  },
                                  {
                                    "$ref": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions"
                                  },
                                  {
                                    "$ref": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
                                  }
                                ]
                              },
                              "top_n_documents": {
                                "type": "integer",
                                "description": "The configured top number of documents to feature for the configured query.",
                                "format": "int32"
                              },
                              "in_scope": {
                                "type": "boolean",
                                "description": "Whether queries should be restricted to use of indexed data."
                              },
                              "strictness": {
                                "maximum": 5,
                                "minimum": 1,
                                "type": "integer",
                                "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                                "format": "int32"
                              },
                              "role_information": {
                                "type": "string",
                                "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "The absolute endpoint path for the Azure Search resource to use.",
                                "format": "uri"
                              },
                              "index_name": {
                                "type": "string",
                                "description": "The name of the index to use as available in the referenced Azure Search resource."
                              },
                              "fields_mapping": {
                                "$ref": "#/components/schemas/azureSearchIndexFieldMappingOptions"
                              },
                              "query_type": {
                                "$ref": "#/components/schemas/azureSearchQueryType"
                              },
                              "semantic_configuration": {
                                "type": "string",
                                "description": "The additional semantic configuration for the query."
                              },
                              "filter": {
                                "type": "string",
                                "description": "Search filter."
                              },
                              "embedding_dependency": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
                                  },
                                  {
                                    "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                                  }
                                ]
                              }
                            },
                            "description": "Parameters for Azure Search when used as an Azure OpenAI chat extension."
                          },
                          "azureSearchIndexFieldMappingOptions": {
                            "type": "object",
                            "properties": {
                              "title_field": {
                                "type": "string",
                                "description": "The name of the index field to use as a title."
                              },
                              "url_field": {
                                "type": "string",
                                "description": "The name of the index field to use as a URL."
                              },
                              "filepath_field": {
                                "type": "string",
                                "description": "The name of the index field to use as a filepath."
                              },
                              "content_fields": {
                                "type": "array",
                                "description": "The names of index fields that should be treated as content.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "content_fields_separator": {
                                "type": "string",
                                "description": "The separator pattern that content fields should use."
                              },
                              "vector_fields": {
                                "type": "array",
                                "description": "The names of fields that represent vector data.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": "Optional settings to control how fields are processed when using a configured Azure Search resource."
                          },
                          "azureSearchQueryType": {
                            "type": "string",
                            "description": "The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
                            "enum": [
                              "simple",
                              "semantic",
                              "vector",
                              "vector_simple_hybrid",
                              "vector_semantic_hybrid"
                            ],
                            "x-ms-enum": {
                              "name": "azureSearchQueryType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "simple",
                                  "value": "simple",
                                  "description": "Represents the default, simple query parser."
                                },
                                {
                                  "name": "semantic",
                                  "value": "semantic",
                                  "description": "Represents the semantic query parser for advanced semantic modeling."
                                },
                                {
                                  "name": "vector",
                                  "value": "vector",
                                  "description": "Represents vector search over computed data."
                                },
                                {
                                  "name": "vectorSimpleHybrid",
                                  "value": "vector_simple_hybrid",
                                  "description": "Represents a combination of the simple query strategy with vector data."
                                },
                                {
                                  "name": "vectorSemanticHybrid",
                                  "value": "vector_semantic_hybrid",
                                  "description": "Represents a combination of semantic search and vector data querying."
                                }
                              ]
                            }
                          },
                          "azureCosmosDBChatExtensionConfiguration": {
                            "required": [
                              "parameters"
                            ],
                            "description": "A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat\nextension.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                              },
                              {
                                "properties": {
                                  "parameters": {
                                    "$ref": "#/components/schemas/azureCosmosDBChatExtensionParameters"
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "azure_cosmos_db"
                          },
                          "azureCosmosDBChatExtensionParameters": {
                            "required": [
                              "authentication",
                              "container_name",
                              "database_name",
                              "embedding_dependency",
                              "fields_mapping",
                              "index_name"
                            ],
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "$ref": "#/components/schemas/onYourDataConnectionStringAuthenticationOptions"
                              },
                              "top_n_documents": {
                                "type": "integer",
                                "description": "The configured top number of documents to feature for the configured query.",
                                "format": "int32"
                              },
                              "in_scope": {
                                "type": "boolean",
                                "description": "Whether queries should be restricted to use of indexed data."
                              },
                              "strictness": {
                                "maximum": 5,
                                "minimum": 1,
                                "type": "integer",
                                "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                                "format": "int32"
                              },
                              "role_information": {
                                "type": "string",
                                "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit."
                              },
                              "database_name": {
                                "type": "string",
                                "description": "The MongoDB vCore database name to use with Azure Cosmos DB."
                              },
                              "container_name": {
                                "type": "string",
                                "description": "The name of the Azure Cosmos DB resource container."
                              },
                              "index_name": {
                                "type": "string",
                                "description": "The MongoDB vCore index name to use with Azure Cosmos DB."
                              },
                              "fields_mapping": {
                                "$ref": "#/components/schemas/azureCosmosDBFieldMappingOptions"
                              },
                              "embedding_dependency": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
                                  },
                                  {
                                    "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                                  }
                                ]
                              }
                            },
                            "description": "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for\nMongoDB vCore."
                          },
                          "azureCosmosDBFieldMappingOptions": {
                            "required": [
                              "content_fields",
                              "vector_fields"
                            ],
                            "type": "object",
                            "properties": {
                              "title_field": {
                                "type": "string",
                                "description": "The name of the index field to use as a title."
                              },
                              "url_field": {
                                "type": "string",
                                "description": "The name of the index field to use as a URL."
                              },
                              "filepath_field": {
                                "type": "string",
                                "description": "The name of the index field to use as a filepath."
                              },
                              "content_fields": {
                                "type": "array",
                                "description": "The names of index fields that should be treated as content.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "content_fields_separator": {
                                "type": "string",
                                "description": "The separator pattern that content fields should use."
                              },
                              "vector_fields": {
                                "type": "array",
                                "description": "The names of fields that represent vector data.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": "Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource."
                          },
                          "onYourDataAuthenticationOptions": {
                            "required": [
                              "type"
                            ],
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/onYourDataAuthenticationType"
                              }
                            },
                            "description": "The authentication options for Azure OpenAI On Your Data.",
                            "discriminator": {
                              "propertyName": "type",
                              "mapping": {
                                "api_key": "#/components/schemas/onYourDataApiKeyAuthenticationOptions",
                                "connection_string": "#/components/schemas/onYourDataConnectionStringAuthenticationOptions",
                                "system_assigned_managed_identity": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions",
                                "user_assigned_managed_identity": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
                              }
                            }
                          },
                          "onYourDataAuthenticationType": {
                            "type": "string",
                            "description": "The authentication types supported with Azure OpenAI On Your Data.",
                            "enum": [
                              "api_key",
                              "connection_string",
                              "system_assigned_managed_identity",
                              "user_assigned_managed_identity"
                            ],
                            "x-ms-enum": {
                              "name": "OnYourDataAuthenticationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "apiKey",
                                  "value": "api_key",
                                  "description": "Authentication via API key."
                                },
                                {
                                  "name": "connectionString",
                                  "value": "connection_string",
                                  "description": "Authentication via connection string."
                                },
                                {
                                  "name": "systemAssignedManagedIdentity",
                                  "value": "system_assigned_managed_identity",
                                  "description": "Authentication via system-assigned managed identity."
                                },
                                {
                                  "name": "userAssignedManagedIdentity",
                                  "value": "user_assigned_managed_identity",
                                  "description": "Authentication via user-assigned managed identity."
                                }
                              ]
                            }
                          },
                          "onYourDataApiKeyAuthenticationOptions": {
                            "required": [
                              "key"
                            ],
                            "description": "The authentication options for Azure OpenAI On Your Data when using an API key.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                              },
                              {
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The API key to use for authentication."
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "api_key"
                          },
                          "onYourDataConnectionStringAuthenticationOptions": {
                            "required": [
                              "connection_string"
                            ],
                            "description": "The authentication options for Azure OpenAI On Your Data when using a connection string.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                              },
                              {
                                "properties": {
                                  "connection_string": {
                                    "type": "string",
                                    "description": "The connection string to use for authentication."
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "connection_string"
                          },
                          "onYourDataSystemAssignedManagedIdentityAuthenticationOptions": {
                            "description": "The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                              }
                            ],
                            "x-ms-discriminator-value": "system_assigned_managed_identity"
                          },
                          "onYourDataUserAssignedManagedIdentityAuthenticationOptions": {
                            "required": [
                              "managed_identity_resource_id"
                            ],
                            "description": "The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                              },
                              {
                                "properties": {
                                  "managed_identity_resource_id": {
                                    "type": "string",
                                    "description": "The resource ID of the user-assigned managed identity to use for authentication."
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "user_assigned_managed_identity"
                          },
                          "onYourDataVectorizationSource": {
                            "required": [
                              "type"
                            ],
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/onYourDataVectorizationSourceType"
                              }
                            },
                            "description": "An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.",
                            "discriminator": {
                              "propertyName": "type",
                              "mapping": {
                                "endpoint": "#/components/schemas/onYourDataEndpointVectorizationSource",
                                "deployment_name": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                              }
                            }
                          },
                          "onYourDataVectorizationSourceType": {
                            "type": "string",
                            "description": "Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with\nvector search.",
                            "enum": [
                              "endpoint",
                              "deployment_name"
                            ],
                            "x-ms-enum": {
                              "name": "OnYourDataVectorizationSourceType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "endpoint",
                                  "value": "endpoint",
                                  "description": "Represents vectorization performed by public service calls to an Azure OpenAI embedding model."
                                },
                                {
                                  "name": "deploymentName",
                                  "value": "deployment_name",
                                  "description": "Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but\nOn Your Data will use this model deployment via an internal call rather than a public one, which enables vector\nsearch even in private networks."
                                }
                              ]
                            }
                          },
                          "onYourDataDeploymentNameVectorizationSource": {
                            "required": [
                              "deployment_name"
                            ],
                            "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non an internal embeddings model deployment name in the same Azure OpenAI resource.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/onYourDataVectorizationSource"
                              },
                              {
                                "properties": {
                                  "deployment_name": {
                                    "type": "string",
                                    "description": "Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks."
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "deployment_name"
                          },
                          "onYourDataEndpointVectorizationSource": {
                            "required": [
                              "authentication",
                              "endpoint"
                            ],
                            "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a public Azure OpenAI endpoint call for embeddings.",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/onYourDataVectorizationSource"
                              },
                              {
                                "properties": {
                                  "authentication": {
                                    "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                                  },
                                  "endpoint": {
                                    "type": "string",
                                    "description": "Specifies the endpoint to use for vectorization. This endpoint must be in the same Azure OpenAI resource, but On Your Data will use this endpoint via an internal call rather than a public one, which enables vector search even in private networks.",
                                    "format": "uri"
                                  }
                                }
                              }
                            ],
                            "x-ms-discriminator-value": "endpoint"
                          },
                          "azureChatExtensionsMessageContext": {
                            "type": "object",
                            "properties": {
                              "citations": {
                                "type": "array",
                                "description": "The data source retrieval result, used to generate the assistant message in the response.",
                                "items": {
                                  "$ref": "#/components/schemas/citation"
                                },
                                "x-ms-identifiers": []
                              },
                              "intent": {
                                "type": "string",
                                "description": "The detected intent from the chat history, used to pass to the next turn to carry over the context."
                              }
                            },
                            "description": "  A representation of the additional context information available when Azure OpenAI chat extensions are involved\n  in the generation of a corresponding chat completions response. This context information is only populated when\n  using an Azure OpenAI request configured to use a matching extension."
                          },
                          "citation": {
                            "required": [
                              "content"
                            ],
                            "type": "object",
                            "properties": {
                              "content": {
                                "type": "string",
                                "description": "The content of the citation."
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the citation."
                              },
                              "url": {
                                "type": "string",
                                "description": "The URL of the citation."
                              },
                              "filepath": {
                                "type": "string",
                                "description": "The file path of the citation."
                              },
                              "chunk_id": {
                                "type": "string",
                                "description": "The chunk ID of the citation."
                              }
                            },
                            "description": "citation information for a chat completions response message."
                          },
                          "chatCompletionMessageToolCall": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the tool call."
                              },
                              "type": {
                                "$ref": "#/components/schemas/toolCallType"
                              },
                              "function": {
                                "type": "object",
                                "description": "The function that the model called.",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  },
                                  "arguments": {
                                    "type": "string",
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                  }
                                },
                                "required": [
                                  "name",
                                  "arguments"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type",
                              "function"
                            ]
                          },
                          "toolCallType": {
                            "type": "string",
                            "enum": [
                              "function"
                            ],
                            "description": "The type of the tool call, in this case `function`.",
                            "x-ms-enum": {
                              "name": "ToolCallType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "function",
                                  "description": "The tool call type is function."
                                }
                              ]
                            }
                          },
                          "chatCompletionRequestMessageTool": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessage"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "tool_call_id": {
                                    "type": "string",
                                    "description": "Tool call that this message is responding to."
                                  },
                                  "content": {
                                    "type": "string",
                                    "description": "The contents of the message.",
                                    "nullable": true
                                  }
                                }
                              }
                            ],
                            "required": [
                              "tool_call_id",
                              "content"
                            ]
                          },
                          "chatCompletionRequestMessageFunction": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionRequestMessage"
                              },
                              {
                                "type": "object",
                                "description": "Deprecated. Message that represents a function.",
                                "nullable": true,
                                "properties": {
                                  "role": {
                                    "type": "string",
                                    "enum": [
                                      "function"
                                    ],
                                    "description": "The role of the messages author, in this case `function`."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The contents of the message."
                                  },
                                  "content": {
                                    "type": "string",
                                    "description": "The contents of the message.",
                                    "nullable": true
                                  }
                                }
                              }
                            ],
                            "required": [
                              "function_call_id",
                              "content"
                            ]
                          },
                          "createChatCompletionResponse": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/chatCompletionsResponseCommon"
                              },
                              {
                                "properties": {
                                  "prompt_filter_results": {
                                    "$ref": "#/components/schemas/promptFilterResults"
                                  },
                                  "choices": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/chatCompletionChoiceCommon"
                                        },
                                        {
                                          "properties": {
                                            "message": {
                                              "$ref": "#/components/schemas/chatCompletionResponseMessage"
                                            },
                                            "content_filter_results": {
                                              "$ref": "#/components/schemas/contentFilterChoiceResults"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ],
                            "required": [
                              "id",
                              "object",
                              "created",
                              "model",
                              "choices"
                            ]
                          },
                          "chatCompletionResponseMessage": {
                            "type": "object",
                            "description": "A chat completion message generated by the model.",
                            "properties": {
                              "role": {
                                "$ref": "#/components/schemas/chatCompletionResponseMessageRole"
                              },
                              "content": {
                                "type": "string",
                                "description": "The contents of the message.",
                                "nullable": true
                              },
                              "tool_calls": {
                                "type": "array",
                                "description": "The tool calls generated by the model, such as function calls.",
                                "items": {
                                  "$ref": "#/components/schemas/chatCompletionMessageToolCall"
                                }
                              },
                              "function_call": {
                                "$ref": "#/components/schemas/chatCompletionFunctionCall"
                              },
                              "context": {
                                "$ref": "#/components/schemas/azureChatExtensionsMessageContext"
                              }
                            }
                          },
                          "chatCompletionResponseMessageRole": {
                            "type": "string",
                            "enum": [
                              "assistant"
                            ],
                            "description": "The role of the author of the response message."
                          },
                          "chatCompletionToolChoiceOption": {
                            "description": "Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.",
                            "oneOf": [
                              {
                                "type": "string",
                                "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.",
                                "enum": [
                                  "none",
                                  "auto"
                                ]
                              },
                              {
                                "$ref": "#/components/schemas/chatCompletionNamedToolChoice"
                              }
                            ]
                          },
                          "chatCompletionNamedToolChoice": {
                            "type": "object",
                            "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "The type of the tool. Currently, only `function` is supported."
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            }
                          },
                          "chatCompletionFunctionCall": {
                            "type": "object",
                            "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              },
                              "arguments": {
                                "type": "string",
                                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                              }
                            },
                            "required": [
                              "name",
                              "arguments"
                            ]
                          },
                          "chatCompletionsResponseCommon": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "A unique identifier for the chat completion."
                              },
                              "object": {
                                "$ref": "#/components/schemas/chatCompletionResponseObject"
                              },
                              "created": {
                                "type": "integer",
                                "format": "unixtime",
                                "description": "The Unix timestamp (in seconds) of when the chat completion was created."
                              },
                              "model": {
                                "type": "string",
                                "description": "The model used for the chat completion."
                              },
                              "usage": {
                                "$ref": "#/components/schemas/completionUsage"
                              },
                              "system_fingerprint": {
                                "type": "string",
                                "description": "Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism."
                              }
                            },
                            "required": [
                              "id",
                              "object",
                              "created",
                              "model"
                            ]
                          },
                          "chatCompletionResponseObject": {
                            "type": "string",
                            "description": "The object type.",
                            "enum": [
                              "chat.completion"
                            ],
                            "x-ms-enum": {
                              "name": "ChatCompletionResponseObject",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "chat.completion",
                                  "description": "The object type is chat completion."
                                }
                              ]
                            }
                          },
                          "completionUsage": {
                            "type": "object",
                            "description": "Usage statistics for the completion request.",
                            "properties": {
                              "prompt_tokens": {
                                "type": "integer",
                                "description": "Number of tokens in the prompt."
                              },
                              "completion_tokens": {
                                "type": "integer",
                                "description": "Number of tokens in the generated completion."
                              },
                              "total_tokens": {
                                "type": "integer",
                                "description": "Total number of tokens used in the request (prompt + completion)."
                              }
                            },
                            "required": [
                              "prompt_tokens",
                              "completion_tokens",
                              "total_tokens"
                            ]
                          },
                          "chatCompletionTool": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/chatCompletionToolType"
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                  },
                                  "parameters": {
                                    "$ref": "#/components/schemas/chatCompletionFunctionParameters"
                                  }
                                },
                                "required": [
                                  "name",
                                  "parameters"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "function"
                            ]
                          },
                          "chatCompletionToolType": {
                            "type": "string",
                            "enum": [
                              "function"
                            ],
                            "description": "The type of the tool. Currently, only `function` is supported.",
                            "x-ms-enum": {
                              "name": "ChatCompletionToolType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "function",
                                  "description": "The tool type is function."
                                }
                              ]
                            }
                          },
                          "chatCompletionChoiceCommon": {
                            "type": "object",
                            "properties": {
                              "index": {
                                "type": "integer"
                              },
                              "finish_reason": {
                                "type": "string"
                              }
                            }
                          },
                          "createTranslationRequest": {
                            "type": "object",
                            "description": "Translation request.",
                            "properties": {
                              "file": {
                                "type": "string",
                                "description": "The audio file to translate.",
                                "format": "binary"
                              },
                              "prompt": {
                                "type": "string",
                                "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English."
                              },
                              "response_format": {
                                "$ref": "#/components/schemas/audioResponseFormat"
                              },
                              "temperature": {
                                "type": "number",
                                "default": 0,
                                "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit."
                              }
                            },
                            "required": [
                              "file"
                            ]
                          },
                          "audioResponse": {
                            "description": "Translation or transcription response when response_format was json",
                            "type": "object",
                            "properties": {
                              "text": {
                                "type": "string",
                                "description": "Translated or transcribed text."
                              }
                            },
                            "required": [
                              "text"
                            ]
                          },
                          "audioVerboseResponse": {
                            "description": "Translation or transcription response when response_format was verbose_json",
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/audioResponse"
                              },
                              {
                                "properties": {
                                  "task": {
                                    "type": "string",
                                    "description": "Type of audio task.",
                                    "enum": [
                                      "transcribe",
                                      "translate"
                                    ],
                                    "x-ms-enum": {
                                      "modelAsString": true
                                    }
                                  },
                                  "language": {
                                    "type": "string",
                                    "description": "Language."
                                  },
                                  "duration": {
                                    "type": "number",
                                    "description": "Duration."
                                  },
                                  "segments": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/audioSegment"
                                    }
                                  }
                                }
                              }
                            ],
                            "required": [
                              "text"
                            ]
                          },
                          "audioResponseFormat": {
                            "title": "AudioResponseFormat",
                            "description": "Defines the format of the output.",
                            "enum": [
                              "json",
                              "text",
                              "srt",
                              "verbose_json",
                              "vtt"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true
                            }
                          },
                          "createTranscriptionRequest": {
                            "type": "object",
                            "description": "Transcription request.",
                            "properties": {
                              "file": {
                                "type": "string",
                                "description": "The audio file object to transcribe.",
                                "format": "binary"
                              },
                              "prompt": {
                                "type": "string",
                                "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language."
                              },
                              "response_format": {
                                "$ref": "#/components/schemas/audioResponseFormat"
                              },
                              "temperature": {
                                "type": "number",
                                "default": 0,
                                "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit."
                              },
                              "language": {
                                "type": "string",
                                "description": "The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency."
                              }
                            },
                            "required": [
                              "file"
                            ]
                          },
                          "audioSegment": {
                            "type": "object",
                            "description": "Transcription or translation segment.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Segment identifier."
                              },
                              "seek": {
                                "type": "number",
                                "description": "Offset of the segment."
                              },
                              "start": {
                                "type": "number",
                                "description": "Segment start offset."
                              },
                              "end": {
                                "type": "number",
                                "description": "Segment end offset."
                              },
                              "text": {
                                "type": "string",
                                "description": "Segment text."
                              },
                              "tokens": {
                                "type": "array",
                                "items": {
                                  "type": "number",
                                  "nullable": false
                                },
                                "description": "Tokens of the text."
                              },
                              "temperature": {
                                "type": "number",
                                "description": "Temperature."
                              },
                              "avg_logprob": {
                                "type": "number",
                                "description": "Average log probability."
                              },
                              "compression_ratio": {
                                "type": "number",
                                "description": "Compression ratio."
                              },
                              "no_speech_prob": {
                                "type": "number",
                                "description": "Probability of 'no speech'."
                              }
                            }
                          },
                          "imageQuality": {
                            "description": "The quality of the image that will be generated.",
                            "type": "string",
                            "enum": [
                              "standard",
                              "hd"
                            ],
                            "default": "standard",
                            "x-ms-enum": {
                              "name": "Quality",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "standard",
                                  "description": "Standard quality creates images with standard quality.",
                                  "name": "Standard"
                                },
                                {
                                  "value": "hd",
                                  "description": "HD quality creates images with finer details and greater consistency across the image.",
                                  "name": "HD"
                                }
                              ]
                            }
                          },
                          "imagesResponseFormat": {
                            "description": "The format in which the generated images are returned.",
                            "type": "string",
                            "enum": [
                              "url",
                              "b64_json"
                            ],
                            "default": "url",
                            "x-ms-enum": {
                              "name": "ImagesResponseFormat",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "url",
                                  "description": "The URL that provides temporary access to download the generated images.",
                                  "name": "Url"
                                },
                                {
                                  "value": "b64_json",
                                  "description": "The generated images are returned as base64 encoded string.",
                                  "name": "Base64Json"
                                }
                              ]
                            }
                          },
                          "imageSize": {
                            "description": "The size of the generated images.",
                            "type": "string",
                            "enum": [
                              "1792x1024",
                              "1024x1792",
                              "1024x1024"
                            ],
                            "default": "1024x1024",
                            "x-ms-enum": {
                              "name": "Size",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "1792x1024",
                                  "description": "The desired size of the generated image is 1792x1024 pixels.",
                                  "name": "Size1792x1024"
                                },
                                {
                                  "value": "1024x1792",
                                  "description": "The desired size of the generated image is 1024x1792 pixels.",
                                  "name": "Size1024x1792"
                                },
                                {
                                  "value": "1024x1024",
                                  "description": "The desired size of the generated image is 1024x1024 pixels.",
                                  "name": "Size1024x1024"
                                }
                              ]
                            }
                          },
                          "imageStyle": {
                            "description": "The style of the generated images.",
                            "type": "string",
                            "enum": [
                              "vivid",
                              "natural"
                            ],
                            "default": "vivid",
                            "x-ms-enum": {
                              "name": "Style",
                              "modelAsString": true,
                              "values": [
                                {
                                  "value": "vivid",
                                  "description": "Vivid creates images that are hyper-realistic and dramatic.",
                                  "name": "Vivid"
                                },
                                {
                                  "value": "natural",
                                  "description": "Natural creates images that are more natural and less hyper-realistic.",
                                  "name": "Natural"
                                }
                              ]
                            }
                          },
                          "imageGenerationsRequest": {
                            "type": "object",
                            "properties": {
                              "prompt": {
                                "description": "A text description of the desired image(s). The maximum length is 4000 characters.",
                                "type": "string",
                                "format": "string",
                                "example": "a corgi in a field",
                                "minLength": 1
                              },
                              "n": {
                                "description": "The number of images to generate.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 1,
                                "default": 1
                              },
                              "size": {
                                "$ref": "#/components/schemas/imageSize"
                              },
                              "response_format": {
                                "$ref": "#/components/schemas/imagesResponseFormat"
                              },
                              "user": {
                                "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.",
                                "type": "string",
                                "format": "string",
                                "example": "user123456"
                              },
                              "quality": {
                                "$ref": "#/components/schemas/imageQuality"
                              },
                              "style": {
                                "$ref": "#/components/schemas/imageStyle"
                              }
                            },
                            "required": [
                              "prompt"
                            ]
                          },
                          "generateImagesResponse": {
                            "type": "object",
                            "properties": {
                              "created": {
                                "type": "integer",
                                "format": "unixtime",
                                "description": "The unix timestamp when the operation was created.",
                                "example": "1676540381"
                              },
                              "data": {
                                "type": "array",
                                "description": "The result data of the operation, if successful",
                                "items": {
                                  "$ref": "#/components/schemas/imageResult"
                                }
                              }
                            },
                            "required": [
                              "created",
                              "data"
                            ]
                          },
                          "imageResult": {
                            "type": "object",
                            "description": "The image url or encoded image if successful, and an error otherwise.",
                            "properties": {
                              "url": {
                                "type": "string",
                                "description": "The image url.",
                                "example": "https://www.contoso.com"
                              },
                              "b64_json": {
                                "type": "string",
                                "description": "The base64 encoded image"
                              },
                              "content_filter_results": {
                                "$ref": "#/components/schemas/dalleContentFilterResults"
                              },
                              "revised_prompt": {
                                "type": "string",
                                "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                              },
                              "prompt_filter_results": {
                                "$ref": "#/components/schemas/dalleFilterResults"
                              }
                            }
                          }
                        },
                        "securitySchemes": {
                          "bearer": {
                            "type": "oauth2",
                            "flows": {
                              "implicit": {
                                "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
                                "scopes": {}
                              }
                            },
                            "x-tokenInfoFunc": "api.middleware.auth.bearer_auth",
                            "x-scopeValidateFunc": "api.middleware.auth.validate_scopes"
                          },
                          "apiKey": {
                            "type": "apiKey",
                            "name": "api-key",
                            "in": "header"
                          }
                        }
                      }
                    },
                    "identityType": "[if(empty(parameters('userAssignedIdentityId')), 'SystemAssigned', 'UserAssigned')]",
                    "identity": {
                      "type": "[variables('identityType')]",
                      "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentityId')), null(), createObject(format('{0}', parameters('userAssignedIdentityId')), createObject()))]"
                    },
                    "apimSubdomains": [
                      "[format('{0}', parameters('name'))]",
                      "[format('{0}.developer', parameters('name'))]",
                      "[format('{0}.portal', parameters('name'))]",
                      "[format('{0}.management', parameters('name'))]",
                      "[format('{0}.scm', parameters('name'))]"
                    ],
                    "throttlingPolicy": "<!--\r\n    - Policies are applied in the order they appear.\r\n    - Position <base/> inside a section to inherit policies from the outer scope.\r\n    - Comments within policies are not preserved.\r\n-->\r\n<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->\r\n    <policies>\r\n        <!-- Throttle, authorize, validate, cache, or transform the requests -->\r\n        <inbound>\r\n            <base />\r\n            <set-variable name='isOpenAI' value='@(context.Request.Url.Path.Contains(\"openai\"))' />\r\n            <choose>\r\n                <when condition='@(context.Variables.GetValueOrDefault<bool>(\"isOpenAI\"))'>\r\n                    <azure-openai-token-limit counter-key=\"@(context.Request.Headers.GetValueOrDefault(\"Ocp-Apim-Subscription-Key\",\"\"))\" tokens-per-minute=\"{{**ProductName**TPMLimit}}\" estimate-prompt-tokens=\"false\" remaining-tokens-variable-name=\"remainingTokens\" />\r\n                </when>\r\n            </choose>\r\n        </inbound>\r\n        <!-- Control if and how the requests are forwarded to services  -->\r\n        <backend>\r\n            <base />\r\n        </backend>\r\n        <!-- Customize the responses -->\r\n        <outbound>\r\n            <base />\r\n        </outbound>\r\n        <!-- Handle exceptions and customize error responses  -->\r\n        <on-error>\r\n            <base />\r\n        </on-error>\r\n    </policies>",
                    "policyProductPlaceholder": "**ProductName**",
                    "openAIAPISpec": "[variables('$fxv#0')]",
                    "openAIPolicy": "<!--\r\n    - Policies are applied in the order they appear.\r\n    - Position <base/> inside a section to inherit policies from the outer scope.\r\n    - Comments within policies are not preserved.\r\n-->\r\n<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->\r\n    <policies>\r\n        <!-- Throttle, authorize, validate, cache, or transform the requests -->\r\n        <inbound>\r\n            <base />\r\n            <authentication-managed-identity resource=\"https://cognitiveservices.azure.com\" output-token-variable-name=\"managed-id-access-token\" ignore-error=\"false\" />\r\n            <set-header name=\"Authorization\" exists-action=\"override\">\r\n                <value>@(\"Bearer \" + (string)context.Variables[\"managed-id-access-token\"])</value>\r\n            </set-header>\r\n            <azure-openai-emit-token-metric namespace=\"AzureOpenAI\">\r\n                <dimension name=\"User ID\" />\r\n                <dimension name=\"Client IP\" value=\"@(context.Request.IpAddress)\" />\r\n                <dimension name=\"Subscription ID\" />\r\n                <dimension name=\"API ID\" />\r\n            </azure-openai-emit-token-metric>\r\n            <set-backend-service backend-id=\"****OPENAI_BACKEND_POOL*****\" />\r\n        </inbound>\r\n        <!-- Control if and how the requests are forwarded to services  -->\r\n        <backend>\r\n            <!--Set count to one less than the number of backends in the pool to try all backends until the backend pool is temporarily unavailable.-->\r\n            <retry count=\"2\" interval=\"0\" first-fast-retry=\"true\" condition=\"@(context.Response.StatusCode == 429 || (context.Response.StatusCode == 503 && !context.Response.StatusReason.Contains(\"Backend pool\") && !context.Response.StatusReason.Contains(\"is temporarily unavailable\")))\">\r\n                <forward-request buffer-request-body=\"true\" />\r\n            </retry>\r\n        </backend>\r\n        <!-- Customize the responses -->\r\n        <outbound>\r\n            <base />\r\n        </outbound>\r\n        <!-- Handle exceptions and customize error responses  -->\r\n        <on-error>\r\n            <base />\r\n        </on-error>\r\n    </policies>",
                    "openAIPolicyBackendPoolPlaceholder": "****OPENAI_BACKEND_POOL*****",
                    "roleDefinitionID": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                    "monitoringRoleDefinitionID": "[resourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]"
                  },
                  "resources": {
                    "apimPublicIp": {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2019-12-01",
                      "name": "[format('pip-{0}', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[toLower(parameters('name'))]"
                        }
                      }
                    },
                    "apiManagement": {
                      "type": "Microsoft.ApiManagement/service",
                      "apiVersion": "2023-05-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "capacity": "[if(equals(parameters('skuName'), 'Consumption'), 0, parameters('skuCapacity'))]",
                        "name": "[parameters('skuName')]"
                      },
                      "identity": "[variables('identity')]",
                      "properties": {
                        "virtualNetworkType": "[parameters('virtualNetworkType')]",
                        "virtualNetworkConfiguration": {
                          "subnetResourceId": "[parameters('apimSubnetId')]"
                        },
                        "publicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}', parameters('name')))]",
                        "publisherEmail": "[parameters('publisherEmail')]",
                        "publisherName": "[parameters('publisherName')]"
                      },
                      "dependsOn": [
                        "apimPublicIp"
                      ]
                    },
                    "aRecords": {
                      "copy": {
                        "name": "aRecords",
                        "count": "[length(variables('apimSubdomains'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('apimDnsZoneName'), variables('apimSubdomains')[copyIndex()])]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[reference('apiManagement').privateIPAddresses[0]]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    },
                    "tokenLimitsNamedValues": {
                      "copy": {
                        "name": "tokenLimitsNamedValues",
                        "count": "[length(parameters('aiProducts'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/namedValues",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}TPMLimit', replace(parameters('aiProducts')[copyIndex()].name, ' ', '')))]",
                      "properties": {
                        "displayName": "[format('{0}TPMLimit', replace(parameters('aiProducts')[copyIndex()].name, ' ', ''))]",
                        "value": "[parameters('aiProducts')[copyIndex()].TPMThreshold]"
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    },
                    "secretNamedValues": {
                      "copy": {
                        "name": "secretNamedValues",
                        "count": "[length(parameters('aiBackends'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/namedValues",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aiBackends')[copyIndex()].name)]",
                      "properties": {
                        "displayName": "[format('{0}-Key1', parameters('aiBackends')[copyIndex()].name)]",
                        "keyVault": {
                          "secretIdentifier": "[parameters('aiBackends')[copyIndex()].keyReferenceUri]"
                        },
                        "secret": true
                      },
                      "dependsOn": [
                        "apiManagement",
                        "apimKVGetSecretsAccess"
                      ]
                    },
                    "appInsightsSecretNamedValue": {
                      "type": "Microsoft.ApiManagement/service/namedValues",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), 'LoggerConnectionString')]",
                      "properties": {
                        "displayName": "LoggerConnectionString",
                        "keyVault": {
                          "secretIdentifier": "[parameters('appInsightsConnectionStringReference')]"
                        },
                        "secret": true
                      },
                      "dependsOn": [
                        "apiManagement",
                        "apimKVGetSecretsAccess"
                      ]
                    },
                    "backends": {
                      "copy": {
                        "name": "backends",
                        "count": "[length(parameters('aiBackends'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/backends",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aiBackends')[copyIndex()].name)]",
                      "properties": {
                        "title": "[parameters('aiBackends')[copyIndex()].name]",
                        "description": "[parameters('aiBackends')[copyIndex()].description]",
                        "url": "[parameters('aiBackends')[copyIndex()].endpoint]",
                        "protocol": "http",
                        "type": "Single",
                        "circuitBreaker": "[if(not(equals(parameters('aiBackends')[copyIndex()].name, 'LanguageEndpoint')), createObject('rules', createArray(createObject('name', 'openAIBreakerRule', 'failureCondition', createObject('count', 1, 'interval', 'PT1M', 'statusCodeRanges', createArray(createObject('min', 429, 'max', 429)), 'errorReasons', createArray('Server errors')), 'tripDuration', 'PT1M', 'acceptRetryAfter', true()))), null())]"
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    },
                    "aoiBackendPool": {
                      "type": "Microsoft.ApiManagement/service/backends",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), 'openAIBackendPool')]",
                      "properties": {
                        "description": "Load balancer for multiple backends",
                        "title": "openAIBackendPool",
                        "type": "Pool",
                        "pool": {
                          "services": [
                            {
                              "id": "[resourceId('Microsoft.ApiManagement/service/backends', parameters('name'), parameters('aiBackends')[0].name)]",
                              "priority": 1
                            },
                            {
                              "id": "[resourceId('Microsoft.ApiManagement/service/backends', parameters('name'), parameters('aiBackends')[1].name)]",
                              "priority": 2
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "apiManagement",
                        "[format('backends[{0}]', 1)]",
                        "[format('backends[{0}]', 0)]"
                      ]
                    },
                    "products": {
                      "copy": {
                        "name": "products",
                        "count": "[length(parameters('aiProducts'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/products",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), toLower(format('{0}aiworkloads', replace(parameters('aiProducts')[copyIndex()].name, ' ', ''))))]",
                      "properties": {
                        "description": "[format('{0} sized AI Workloads', parameters('aiProducts')[copyIndex()].name)]",
                        "displayName": "[format('{0}AIWorkloads', replace(parameters('aiProducts')[copyIndex()].name, ' ', ''))]",
                        "subscriptionRequired": true,
                        "state": "published"
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    },
                    "productPolicies": {
                      "copy": {
                        "name": "productPolicies",
                        "count": "[length(parameters('aiProducts'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/products/policies",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('name'), toLower(format('{0}aiworkloads', replace(parameters('aiProducts')[copyIndex()].name, ' ', ''))), 'policy')]",
                      "properties": {
                        "format": "rawxml",
                        "value": "[replace(variables('throttlingPolicy'), variables('policyProductPlaceholder'), toLower(replace(parameters('aiProducts')[copyIndex()].name, ' ', '')))]"
                      },
                      "dependsOn": [
                        "[format('products[{0}]', copyIndex())]"
                      ]
                    },
                    "openAIApi": {
                      "type": "Microsoft.ApiManagement/service/apis",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), 'azure-openai-service-api')]",
                      "properties": {
                        "displayName": "Azure OpenAI Service API",
                        "description": "Azure OpenAI APIs for completions and search",
                        "subscriptionRequired": true,
                        "path": "openai",
                        "protocols": [
                          "https"
                        ],
                        "subscriptionKeyParameterNames": {
                          "header": "api-key",
                          "query": "api-key"
                        },
                        "apiType": "http",
                        "format": "openapi+json",
                        "value": "[variables('openAIAPISpec')]"
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    },
                    "openAIProducs": {
                      "copy": {
                        "name": "openAIProducs",
                        "count": "[length(parameters('aiProducts'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/products/apis",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('name'), toLower(format('{0}aiworkloads', replace(parameters('aiProducts')[copyIndex()].name, ' ', ''))), 'azure-openai-service-api')]",
                      "dependsOn": [
                        "openAIApi",
                        "[format('products[{0}]', copyIndex())]"
                      ]
                    },
                    "openAIApiPolicy": {
                      "type": "Microsoft.ApiManagement/service/apis/policies",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('name'), 'azure-openai-service-api', 'policy')]",
                      "properties": {
                        "value": "[replace(variables('openAIPolicy'), variables('openAIPolicyBackendPoolPlaceholder'), 'openAIBackendPool')]",
                        "format": "rawxml"
                      },
                      "dependsOn": [
                        "aoiBackendPool",
                        "openAIApi"
                      ]
                    },
                    "languageAPI": {
                      "type": "Microsoft.ApiManagement/service/apis",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), 'language-api')]",
                      "properties": {
                        "displayName": "PII Detection",
                        "description": "PII Detection",
                        "subscriptionRequired": true,
                        "path": "language",
                        "protocols": [
                          "https"
                        ],
                        "subscriptionKeyParameterNames": {
                          "header": "Ocp-Apim-Subscription-Key",
                          "query": "subscription-key"
                        }
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    },
                    "piiDetect": {
                      "type": "Microsoft.ApiManagement/service/apis/operations",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('name'), 'language-api', 'piiDetect')]",
                      "properties": {
                        "displayName": "Detect",
                        "method": "POST",
                        "urlTemplate": "/:analyze-text?api-version=2022-05-01",
                        "templateParameters": [],
                        "description": "Creates a completion for the provided prompt, parameters and chosen model.",
                        "responses": []
                      },
                      "dependsOn": [
                        "languageAPI"
                      ]
                    },
                    "aiLogger": {
                      "type": "Microsoft.ApiManagement/service/loggers",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), 'apimLogger')]",
                      "properties": {
                        "loggerType": "applicationInsights",
                        "description": "Application Insights logger with system-assigned managed identity",
                        "credentials": {
                          "connectionString": "[format('{{{{{0}}}}}', 'LoggerConnectionString')]",
                          "identityClientId": "systemAssigned"
                        },
                        "resourceId": "[parameters('appInsightsId')]",
                        "isBuffered": false
                      },
                      "dependsOn": [
                        "apiManagement",
                        "appInsightsSecretNamedValue"
                      ]
                    },
                    "openAIDiagnostics": {
                      "type": "Microsoft.ApiManagement/service/apis/diagnostics",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('name'), 'azure-openai-service-api', 'applicationinsights')]",
                      "properties": {
                        "alwaysLog": "allErrors",
                        "logClientIp": true,
                        "metrics": true,
                        "httpCorrelationProtocol": "W3C",
                        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('name'), 'apimLogger')]",
                        "verbosity": "information",
                        "sampling": {
                          "samplingType": "fixed",
                          "percentage": 100
                        },
                        "frontend": {
                          "request": {
                            "headers": [],
                            "body": {
                              "bytes": 0
                            }
                          },
                          "response": {
                            "headers": [],
                            "body": {
                              "bytes": 0
                            }
                          }
                        },
                        "backend": {
                          "request": {
                            "headers": [],
                            "body": {
                              "bytes": 0
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "aiLogger",
                        "openAIApi"
                      ]
                    },
                    "openAICreated": {
                      "copy": {
                        "name": "openAICreated",
                        "count": "[length(parameters('openAIDeployments'))]"
                      },
                      "existing": true,
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}-{1}', parameters('openAIResourceName'), copyIndex())]"
                    },
                    "roleAssignment": {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('openAIDeployments'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format('{0}-{1}', parameters('openAIResourceName'), copyIndex()))]",
                      "name": "[guid(subscription().id, resourceGroup().id, format('{0}-{1}', parameters('openAIResourceName'), copyIndex()), variables('roleDefinitionID'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionID')]",
                        "principalId": "[reference('apiManagement', '2023-05-01-preview', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "apiManagement",
                        "[format('openAICreated[{0}]', copyIndex())]",
                        "[format('openAICreated[{0}]', copyIndex())]"
                      ]
                    },
                    "appInsightsCreated": {
                      "existing": true,
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('appInsightsName')]"
                    },
                    "monitoringRoleAssignment": {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
                      "name": "[guid(subscription().id, resourceGroup().id, parameters('appInsightsName'), variables('monitoringRoleDefinitionID'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('monitoringRoleDefinitionID')]",
                        "principalId": "[reference('apiManagement', '2023-05-01-preview', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "apiManagement",
                        "appInsightsCreated"
                      ]
                    },
                    "apimKVGetSecretsAccess": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KVAccess', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "tenantId": {
                            "value": "[reference('apiManagement', '2023-05-01-preview', 'full').identity.tenantId]"
                          },
                          "objectId": {
                            "value": "[reference('apiManagement', '2023-05-01-preview', 'full').identity.principalId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "2425430599604042471"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The KeyVault's name"
                              }
                            },
                            "tenantId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Tenant Id of the assignee."
                              }
                            },
                            "objectId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Object Id of the assignee."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/accessPolicies",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                              "properties": {
                                "accessPolicies": [
                                  {
                                    "tenantId": "[parameters('tenantId')]",
                                    "objectId": "[parameters('objectId')]",
                                    "permissions": {
                                      "secrets": [
                                        "get"
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "keyVaultNameFromAccessPolicy": {
                              "type": "string",
                              "value": "[parameters('keyVaultName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "apiManagement"
                      ]
                    }
                  },
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "gatewayUrl": {
                      "type": "string",
                      "value": "[reference('apiManagement').gatewayUrl]"
                    },
                    "identity": {
                      "type": "object",
                      "value": "[if(equals(variables('identity'), 'SystemAssigned'), createObject('tenantId', reference('apiManagement', '2023-05-01-preview', 'full').identity.tenantId, 'principalId', reference('apiManagement', '2023-05-01-preview', 'full').identity.principalId, 'type', reference('apiManagement', '2023-05-01-preview', 'full').identity.type), createObject())]"
                    },
                    "privateIPAddresses": {
                      "type": "array",
                      "value": "[reference('apiManagement').privateIPAddresses]"
                    },
                    "policyDbg": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('aiProducts'))]",
                        "input": "[replace(variables('throttlingPolicy'), variables('policyProductPlaceholder'), toLower(replace(parameters('aiProducts')[copyIndex()].name, ' ', '')))]"
                      }
                    },
                    "products": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('aiProducts'))]",
                        "input": "[toLower(format('{0}aiworkloads', replace(parameters('aiProducts')[copyIndex()].name, ' ', '')))]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AppInsights-{0}-Deployment', variables('resourceNames').applicationInsights))]",
                "[resourceId('Microsoft.Resources/deployments', 'KeyVault-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-Deployment', variables('resourceNames').languageService))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 0))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 1))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 1))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}-Deployment', variables('resourceNames').openAI, 0))]",
                "[resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('JumpboxVM-{0}-Deployment', variables('resourceNames').jumpboxVM)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').jumpboxVM]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'privateendpoints-snet')))).id]"
                  },
                  "adminPassword": {
                    "value": "[parameters('VmAdminPassword')]"
                  },
                  "adminUserName": {
                    "value": "[parameters('VmAdminUsername')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15707882354437128223"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 15
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "adminUserName": {
                      "type": "string",
                      "defaultValue": "vmadmin"
                    },
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "includeVsCode": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "windowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2019-Datacenter",
                      "allowedValues": [
                        "2008-R2-SP1",
                        "2012-Datacenter",
                        "2012-R2-Datacenter",
                        "2016-Nano-Server",
                        "2016-Datacenter-with-Containers",
                        "2016-Datacenter",
                        "2019-Datacenter",
                        "2022-datacenter-azure-edition-core",
                        "2022-Datacenter"
                      ],
                      "metadata": {
                        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_D2_v3",
                      "metadata": {
                        "description": "Size of the virtual machine."
                      }
                    }
                  },
                  "variables": {
                    "resourceNames": {
                      "nic": "[format('nic-{0}', parameters('name'))]"
                    },
                    "nicIpConfigurationDefaults": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    },
                    "nicIpConfigurationProperties": "[variables('nicIpConfigurationDefaults')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('resourceNames').nic]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": "[variables('nicIpConfigurationProperties')]"
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('name')]",
                          "adminUsername": "[parameters('adminUserName')]",
                          "adminPassword": "[parameters('adminPassword')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('windowsOSVersion')]",
                            "version": "latest"
                          },
                          "osDisk": {
                            "createOption": "FromImage"
                          },
                          "dataDisks": [
                            {
                              "diskSizeGB": 1023,
                              "lun": 0,
                              "createOption": "Empty"
                            }
                          ]
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('resourceNames').nic)]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', variables('resourceNames').nic)]"
                      ]
                    },
                    {
                      "condition": "[parameters('includeVsCode')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'config-app')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "commandToExecute": "powershell -ExecutionPolicy Unrestricted -File ./Install-VSCode.ps1 -EnableContextMenus",
                          "fileUris": [
                            "https://raw.githubusercontent.com/PowerShell/vscode-powershell/master/scripts/Install-VSCode.ps1"
                          ]
                        },
                        "protectedSettings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "KeyVault-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').keyVault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "skuName": {
                    "value": "[parameters('keyVaultSku')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "privateDnsZoneId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment'), '2022-09-01').outputs.zones.value, lambda('zone', equals(lambdaVariables('zone').deploymentName, 'dns-keyvault')))).id]"
                  },
                  "privateEndpointSubnet": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'privateendpoints-snet')))).id]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "9358846570673049219"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "standard",
                      "allowedValues": [
                        "standard",
                        "premium"
                      ]
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of access policy configurations, schema ref: https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/vaults/accesspolicies?tabs=json#microsoftkeyvaultvaultsaccesspolicies-object"
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Secrets object with name/value pairs"
                      }
                    },
                    "privateEndpointSubResource": {
                      "type": "string",
                      "defaultValue": "vault"
                    },
                    "privateEndpointSubnet": {
                      "type": "string"
                    },
                    "privateDnsZoneId": {
                      "type": "string"
                    },
                    "networkACLdefaultAction": {
                      "type": "string",
                      "defaultValue": "Deny"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "disabled"
                    },
                    "enableForDeployment": {
                      "type": "bool",
                      "defaultValue": true
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "[parameters('skuName')]"
                        },
                        "accessPolicies": "[parameters('accessPolicies')]",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "[parameters('networkACLdefaultAction')]"
                        },
                        "createMode": "default",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "enabledForDeployment": "[parameters('enableForDeployment')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "keyVaultSecret",
                        "count": "[length(items(parameters('secrets')))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-02-01",
                      "name": "[format('{0}/{1}', parameters('name'), items(parameters('secrets'))[copyIndex()].value.name)]",
                      "properties": {
                        "value": "[items(parameters('secrets'))[copyIndex()].value.value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('privateendpoint-{0}', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('privateendpoint-{0}', parameters('name'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "privateDnsZoneId": {
                            "value": "[parameters('privateDnsZoneId')]"
                          },
                          "privateLinkServiceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                          },
                          "subResource": {
                            "value": "[parameters('privateEndpointSubResource')]"
                          },
                          "subnetId": {
                            "value": "[parameters('privateEndpointSubnet')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "14351599574430642892"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "privateLinkServiceId": {
                              "type": "string"
                            },
                            "privateDnsZoneId": {
                              "type": "string"
                            },
                            "subResource": {
                              "type": "string",
                              "allowedValues": [
                                "sites",
                                "sqlServer",
                                "mysqlServer",
                                "blob",
                                "file",
                                "queue",
                                "table",
                                "redisCache",
                                "registry",
                                "namespace",
                                "Sql",
                                "vault",
                                "Table",
                                "staticSites",
                                "configurationStores",
                                "account"
                              ]
                            }
                          },
                          "variables": {
                            "privateLinkConnectionName": "[format('prvLnk-{0}', parameters('name'))]",
                            "privateDnsZoneConfigName": "[format('prvDnsZoneConfig-{0}', parameters('name'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateLinkConnectionName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subResource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('DnsZoneGroup-{0}', parameters('name')))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[variables('privateDnsZoneConfigName')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'privateDnsZones-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('resourceNames').applicationGateway]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').applicationGateway]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "dnsLabelPrefix": {
                    "value": "[variables('resourceNames').applicationGateway]"
                  },
                  "frontendWebAppFqdn": {
                    "value": "[replace(reference(resourceId('Microsoft.Resources/deployments', format('APIM-{0}-Deployment', variables('resourceNames').apim)), '2022-09-01').outputs.gatewayUrl.value, 'https://', '')]"
                  },
                  "subnetId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'applicationgateway-snet')))).id]"
                  },
                  "privateLinkSubnetId": {
                    "value": "[first(filter(reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.subnets.value, lambda('subnet', equals(lambdaVariables('subnet').name, 'privatelink-snet')))).id]"
                  },
                  "privateIp": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName'))), '2022-09-01').outputs.appGWprivateIp.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "13084185466864493998"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "dnsLabelPrefix": {
                      "type": "string"
                    },
                    "frontendWebAppFqdn": {
                      "type": "string"
                    },
                    "privateLinkSubnetId": {
                      "type": "string"
                    },
                    "privateIp": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "resourceNames": {
                      "publicIP": "[format('pip-{0}', parameters('name'))]",
                      "backendAddressPool": "[format('beap-frontendwebapp-{0}', parameters('name'))]",
                      "frontendPort80": "[format('feport-{0}-80', parameters('name'))]",
                      "frontendPrivateIpConfiguration": "appGwPrivateFrontendIpIPv4",
                      "frontendPublicIpConfiguration": "appGwPublicFrontendIpIPv4",
                      "backendHttpSettingFor443": "[format('be-htst-{0}-443', parameters('name'))]",
                      "httpListener": "[format('httplstn-{0}', parameters('name'))]",
                      "requestRoutingRule": "[format('rqrt-{0}', parameters('name'))]",
                      "redirectConfiguration": "[format('rdrcfg-{0}', parameters('name'))]",
                      "probeApimGateway": "[format('prb-apimgw-{0}-gw', parameters('name'))]",
                      "probeApimPortal": "[format('prb-apimgw-{0}-portal', parameters('name'))]",
                      "privateLinkConfiguration": "hubai-dev-privatelink"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('resourceNames').publicIP]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "autoscaleConfiguration": {
                          "minCapacity": 1,
                          "maxCapacity": 4
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "[format('{0}-ip-configuration', parameters('name'))]",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "[variables('resourceNames').frontendPublicIpConfiguration]",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP)]"
                              }
                            }
                          },
                          {
                            "name": "[variables('resourceNames').frontendPrivateIpConfiguration]",
                            "properties": {
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              },
                              "privateIPAddress": "[parameters('privateIp')]",
                              "privateLinkConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/privateLinkConfigurations', parameters('name'), variables('resourceNames').privateLinkConfiguration)]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[variables('resourceNames').frontendPort80]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "[variables('resourceNames').probeApimGateway]",
                            "properties": {
                              "path": "/status-0123456789abcdef",
                              "pickHostNameFromBackendHttpSettings": true,
                              "protocol": "Https",
                              "timeout": 30,
                              "interval": 30
                            }
                          },
                          {
                            "name": "[variables('resourceNames').probeApimPortal]",
                            "properties": {
                              "path": "/signin",
                              "pickHostNameFromBackendHttpSettings": true,
                              "protocol": "Https",
                              "timeout": 30,
                              "interval": 30
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[variables('resourceNames').backendAddressPool]",
                            "properties": {
                              "backendAddresses": [
                                {
                                  "fqdn": "[parameters('frontendWebAppFqdn')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('resourceNames').backendHttpSettingFor443]",
                            "properties": {
                              "port": 443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "pickHostNameFromBackendAddress": true,
                              "requestTimeout": 120,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes', parameters('name'), variables('resourceNames').probeApimGateway)]"
                              }
                            }
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('resourceNames').httpListener]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('name'), variables('resourceNames').frontendPrivateIpConfiguration)]"
                              },
                              "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('name'), variables('resourceNames').frontendPort80)]"
                              },
                              "protocol": "Http",
                              "sslCertificate": null
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[variables('resourceNames').requestRoutingRule]",
                            "properties": {
                              "ruleType": "Basic",
                              "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('name'), variables('resourceNames').httpListener)]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('name'), variables('resourceNames').backendAddressPool)]"
                              },
                              "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('name'), variables('resourceNames').backendHttpSettingFor443)]"
                              }
                            }
                          }
                        ],
                        "privateLinkConfigurations": [
                          {
                            "name": "[variables('resourceNames').privateLinkConfiguration]",
                            "properties": {
                              "ipConfigurations": [
                                {
                                  "name": "privateLinkIpConfig1",
                                  "properties": {
                                    "privateIPAllocationMethod": "Dynamic",
                                    "primary": false,
                                    "subnet": {
                                      "id": "[parameters('privateLinkSubnetId')]"
                                    }
                                  }
                                },
                                {
                                  "name": "privateLinkIpConfig2",
                                  "properties": {
                                    "privateIPAllocationMethod": "Dynamic",
                                    "primary": false,
                                    "subnet": {
                                      "id": "[parameters('privateLinkSubnetId')]"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP)]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('APIM-{0}-Deployment', variables('resourceNames').apim))]",
                "[resourceId('Microsoft.Resources/deployments', format('Vnet-{0}-Deployment', parameters('applicationName')))]"
              ]
            }
          ],
          "outputs": {
            "apimName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('APIM-{0}-Deployment', variables('resourceNames').apim)), '2022-09-01').outputs.name.value]"
            },
            "applicationGatewayName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('resourceNames').applicationGateway), '2022-09-01').outputs.name.value]"
            },
            "products": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('APIM-{0}-Deployment', variables('resourceNames').apim)), '2022-09-01').outputs.products.value]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    }
  },
  "outputs": {
    "apimName": {
      "type": "string",
      "value": "[reference('main').outputs.apimName.value]"
    },
    "appGatewayName": {
      "type": "string",
      "value": "[reference('main').outputs.applicationGatewayName.value]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[variables('names').resourceGroup.name]"
    },
    "location": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "products": {
      "type": "array",
      "value": "[reference('main').outputs.products.value]"
    },
    "hubDns": {
      "type": "string",
      "value": "[parameters('hubDnsName')]"
    }
  }
}